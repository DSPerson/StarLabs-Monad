LavaPack.loadBundle([[10,{"../../../shared/constants/network":5748,"../constants/contracts":5,"../lib/util":135,"@ethersproject/contracts":529,"@ethersproject/providers":567,"@metamask/base-controller":1397,"@metamask/utils":3224,lodash:4866,loglevel:4872,"single-call-balance-checker-abi":5579,uuid:5660},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAccountTrackerControllerState=n.default=void 0;var r=e("uuid"),s=m(e("loglevel")),o=e("@ethersproject/providers"),a=e("@ethersproject/contracts"),i=m(e("single-call-balance-checker-abi")),l=e("lodash"),c=e("@metamask/utils"),d=e("@metamask/base-controller"),u=e("../../../shared/constants/network"),h=e("../constants/contracts"),p=e("../lib/util");function m(e){return e&&e.__esModule?e:{default:e}}function g(e,t,n){C(e,t),t.set(e,n)}function C(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function f(e,t){return e.get(v(e,t))}function y(e,t,n){return e.set(v(e,t),n),n}function v(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const w={accounts:{persist:!0,anonymous:!1},currentBlockGasLimit:{persist:!0,anonymous:!0},accountsByChainId:{persist:!0,anonymous:!1},currentBlockGasLimitByChainId:{persist:!0,anonymous:!0}},b=()=>({accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{}});n.getDefaultAccountTrackerControllerState=b;var k=new WeakMap,S=new WeakMap,A=new WeakMap,T=new WeakMap,M=new WeakMap,E=new WeakMap,P=new WeakMap,N=new WeakSet,_=new WeakMap;class I extends d.BaseController{constructor(e){var t,n;super({name:"AccountTrackerController",metadata:w,state:{accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{},...e.state},messenger:e.messenger}),C(t=this,n=N),n.add(t),g(this,k,new Map),g(this,S,{}),g(this,A,void 0),g(this,T,void 0),g(this,M,{}),g(this,E,void 0),g(this,P,void 0),g(this,_,(async e=>{await v(N,this,F).call(this,undefined,e)})),y(A,this,e.provider),y(T,this,e.blockTracker),y(E,this,e.getNetworkIdentifier),this.messagingSystem.subscribe("KeyringController:accountRemoved",(e=>this.removeAccounts([e])));const r=this.messagingSystem.call("OnboardingController:getState");this.messagingSystem.subscribe("OnboardingController:stateChange",(0,p.previousValueComparator)(((e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r}=t;return!n&&r&&this.updateAccountsAllActiveNetworks(),!0}),r)),y(P,this,this.messagingSystem.call("AccountsController:getSelectedAccount")),this.messagingSystem.subscribe("AccountsController:selectedEvmAccountChange",(e=>{const{useMultiAccountBalanceChecker:t}=this.messagingSystem.call("PreferencesController:getState");f(P,this).id===e.id||t||(y(P,this,e),this.updateAccountsAllActiveNetworks())}))}resetState(){const{accounts:e,accountsByChainId:t,currentBlockGasLimit:n,currentBlockGasLimitByChainId:r}={accounts:{},currentBlockGasLimit:"",accountsByChainId:{},currentBlockGasLimitByChainId:{}};this.update((s=>{s.accounts=e,s.accountsByChainId=t,s.currentBlockGasLimit=n,s.currentBlockGasLimitByChainId=r}))}start(){y(M,this,{[v(N,this,R).call(this)]:f(T,this).getCurrentBlock()}),f(T,this).once("latest",(e=>{f(M,this)[v(N,this,R).call(this)]=e})),f(T,this).removeListener("latest",f(_,this)),f(T,this).addListener("latest",f(_,this)),this.updateAccounts()}stop(){f(T,this).removeListener("latest",f(_,this))}startPollingByNetworkClientId(e){const t=(0,r.v4)(),n=f(k,this).get(e);if(n)n.add(t);else{const n=new Set;n.add(t),f(k,this).set(e,n),v(N,this,B).call(this,e)}return t}stopAllPolling(){this.stop(),f(k,this).forEach(((e,t)=>{e.forEach((e=>{this.stopPollingByPollingToken(e)}))}))}stopPollingByPollingToken(e){if(!e)throw new Error("pollingToken required");let t=!1;if(f(k,this).forEach(((n,r)=>{n.has(e)&&(t=!0,n.delete(e),0===n.size&&(f(k,this).delete(r),v(N,this,D).call(this,r)))})),!t)throw new Error("pollingToken not found")}syncWithAddresses(e){const{accounts:t}=this.state,n=Object.keys(t),r=[];e.forEach((e=>{n.includes(e)||r.push(e)}));const s=[];n.forEach((t=>{e.includes(t)||s.push(t)})),this.addAccounts(r),this.removeAccounts(s)}addAccounts(e){const{accounts:t,accountsByChainId:n}=this.state,r=(0,l.cloneDeep)(t),s=(0,l.cloneDeep)(n);e.forEach((e=>{r[e]={}})),Object.keys(s).forEach((t=>{e.forEach((e=>{s[t][e]={}}))})),this.update((e=>{e.accounts=r,e.accountsByChainId=s})),f(M,this)[v(N,this,R).call(this)]&&this.updateAccounts(),f(k,this).forEach(((e,t)=>{const{chainId:n}=v(N,this,O).call(this,t);f(M,this)[n]&&this.updateAccounts(t)}))}removeAccounts(e){const{accounts:t,accountsByChainId:n}=this.state,r=(0,l.cloneDeep)(t),s=(0,l.cloneDeep)(n);e.forEach((e=>{delete r[e]})),Object.keys(s).forEach((t=>{e.forEach((e=>{delete s[t][e]}))})),this.update((e=>{e.accounts=r,e.accountsByChainId=s}))}clearAccounts(){this.update((e=>{e.accounts={},e.accountsByChainId={[v(N,this,R).call(this)]:{}}}))}async updateAccountsAllActiveNetworks(){await this.updateAccounts(),await Promise.all(Array.from(f(k,this)).map((([e])=>this.updateAccounts(e))))}async updateAccounts(e){const{completedOnboarding:t}=this.messagingSystem.call("OnboardingController:getState");if(!t)return;const{chainId:n,provider:r,identifier:s}=v(N,this,O).call(this,e),{useMultiAccountBalanceChecker:o}=this.messagingSystem.call("PreferencesController:getState");let a=[];if(o){const{accounts:e}=this.state;a=Object.keys(e)}else{a=[this.messagingSystem.call("AccountsController:getSelectedAccount").address]}s!==u.LOCALHOST_RPC_URL&&"http://127.0.0.1:8545"!==s&&n in h.SINGLE_CALL_BALANCES_ADDRESSES?await v(N,this,L).call(this,a,h.SINGLE_CALL_BALANCES_ADDRESSES[n],r,n):await Promise.all(a.map((e=>v(N,this,U).call(this,e,r,n))))}}function R(){const{selectedNetworkClientId:e}=this.messagingSystem.call("NetworkController:getState"),{configuration:{chainId:t}}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);return t}function O(e){if(e){const{configuration:t,provider:n,blockTracker:r}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);return{chainId:t.chainId,provider:n,blockTracker:r,identifier:f(E,this).call(this,t)}}return{chainId:v(N,this,R).call(this),provider:f(A,this),blockTracker:f(T,this),identifier:f(E,this).call(this)}}function B(e){if(f(S,this)[e])return;const{blockTracker:t}=v(N,this,O).call(this,e),n=t=>v(N,this,F).call(this,e,t);t.addListener("latest",n),f(S,this)[e]=n,this.updateAccounts(e)}function D(e){if(!f(S,this)[e])return;const{blockTracker:t}=v(N,this,O).call(this,e);t.removeListener("latest",f(S,this)[e]),delete f(S,this)[e]}function x(e){const{accounts:t,accountsByChainId:n}=this.state;if(n[e])return(0,l.cloneDeep)(n[e]);const r={};return Object.keys(t).forEach((e=>{r[e]={}})),r}async function F(e,t){const{chainId:n,provider:r}=v(N,this,O).call(this,e);f(M,this)[n]=t;const o=await r.request({method:"eth_getBlockByNumber",params:[t,!1]});if(!o)return;const a=o.gasLimit;this.update((e=>{n===v(N,this,R).call(this)&&(e.currentBlockGasLimit=a),e.currentBlockGasLimitByChainId[n]=a}));try{await this.updateAccounts(e)}catch(e){s.default.error(e)}}async function U(e,t,n){const{useMultiAccountBalanceChecker:r}=this.messagingSystem.call("PreferencesController:getState");let s="0x0";try{s=await t.request({method:"eth_getBalance",params:[e,"latest"]})}catch(e){if(e&&"object"==typeof e&&(0,c.hasProperty)(e,"data")&&e.data&&(0,c.hasProperty)(e.data,"request")&&e.data.request&&(0,c.hasProperty)(e.data.request,"method")&&"eth_getBalance"!==e.data.request.method)throw e}const o={address:e,balance:s},a=v(N,this,x).call(this,n);if(!a[e])return;let i=a;r||(i={},Object.keys(a).forEach((t=>{e!==t&&(i[t]={address:t,balance:null})}))),i[e]=o,this.update((e=>{n===v(N,this,R).call(this)&&(e.accounts=i),e.accountsByChainId[n]=i}))}async function L(e,t,n,r){const l=await new a.Contract(t,i.default,new o.Web3Provider(n)),c=["0x0000000000000000000000000000000000000000"];try{const t=await l.balances(e,c),n=v(N,this,x).call(this,r),s={};Object.keys(n).forEach((t=>{e.includes(t)||(s[t]={address:t,balance:null})})),e.forEach(((e,n)=>{const r=t[n]?t[n].toHexString():"0x0";s[e]={address:e,balance:r}})),this.update((e=>{r===v(N,this,R).call(this)&&(e.accounts=s),e.accountsByChainId[r]=s}))}catch(t){s.default.warn("MetaMask - Account Tracker single call balance fetch failed",t),Promise.allSettled(e.map((e=>v(N,this,U).call(this,e,n,r))))}}n.default=I}}},{package:"$root$",file:"app/scripts/controllers/account-tracker-controller.ts"}],[100,{"../../../../../shared/constants/app":5732,"./ethereum-chain-utils":102,"@metamask/controller-utils":1423,"@metamask/network-controller":2240,"@metamask/rpc-errors":2568,lodash:4866,"uri-js":5635},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&{}.hasOwnProperty.call(e,o)){var a=s?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(e("uri-js")),s=e("@metamask/controller-utils"),o=e("@metamask/network-controller"),a=e("@metamask/rpc-errors"),i=e("lodash"),l=e("../../../../../shared/constants/app"),c=e("./ethereum-chain-utils");function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}const u={methodNames:[l.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],implementation:async function(e,t,n,l,{addNetwork:d,updateNetwork:u,getNetworkConfigurationByChainId:h,setActiveNetwork:p,requestUserApproval:m,startApprovalFlow:g,endApprovalFlow:C,getCurrentChainIdForDomain:f,getCaveat:y,requestPermittedChainsPermission:v,grantPermittedChainsPermissionIncremental:w}){let b;try{b=(0,c.validateAddEthereumChainParams)(e.params[0])}catch(e){return l(e)}const{chainId:k,chainName:S,firstValidBlockExplorerUrl:A,firstValidRPCUrl:T,ticker:M}=b,{origin:E}=e,P=f(E),N=h(k);if(N&&N.chainId===k&&N.nativeCurrency!==M)return l(a.rpcErrors.invalidParams({message:`nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${M}`}));let _,I=N,R=null==N?void 0:N.rpcEndpoints.findIndex((({url:e})=>r.equal(e,T))),O=A?null==N?void 0:N.blockExplorerUrls.findIndex((e=>r.equal(e,A))):undefined;if(!N||R!==N.defaultRpcEndpointIndex||A&&O!==N.defaultBlockExplorerUrlIndex){({id:_}=await g());try{if(await m({origin:E,type:s.ApprovalType.AddEthereumChain,requestData:{chainId:k,rpcPrefs:{blockExplorerUrl:A},chainName:S,rpcUrl:T,ticker:M}}),N){const e=(0,i.cloneDeep)(N);-1===R&&(e.rpcEndpoints=[...e.rpcEndpoints,{url:T,type:o.RpcEndpointType.Custom,name:S}],R=e.rpcEndpoints.length-1),e.defaultRpcEndpointIndex=R,A&&(-1===O&&(e.blockExplorerUrls=[...e.blockExplorerUrls,A],O=e.blockExplorerUrls.length-1),e.defaultBlockExplorerUrlIndex=O),I=await u(e.chainId,e,P===k?{replacementSelectedRpcEndpointIndex:e.defaultRpcEndpointIndex}:undefined)}else I=await d({blockExplorerUrls:A?[A]:[],defaultBlockExplorerUrlIndex:A?0:undefined,chainId:k,defaultRpcEndpointIndex:0,name:S,nativeCurrency:M,rpcEndpoints:[{url:T,name:S,type:o.RpcEndpointType.Custom}]})}catch(e){return C({id:_}),l(e)}}if(k!==P){const{networkClientId:e}=I.rpcEndpoints[I.defaultRpcEndpointIndex];return(0,c.switchChain)(t,l,k,e,_,{isAddFlow:!0,setActiveNetwork:p,endApprovalFlow:C,getCaveat:y,requestPermittedChainsPermission:v,grantPermittedChainsPermissionIncremental:w})}_&&C({id:_});return t.result=null,l()},hookNames:{addNetwork:!0,updateNetwork:!0,getNetworkConfigurationByChainId:!0,setActiveNetwork:!0,requestUserApproval:!0,startApprovalFlow:!0,endApprovalFlow:!0,getCurrentChainIdForDomain:!0,getCaveat:!0,requestPermittedChainsPermission:!0,grantPermittedChainsPermissionIncremental:!0}};n.default=u}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/add-ethereum-chain.js"}],[101,{"../../../../../shared/constants/app":5732},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.ETH_ACCOUNTS],implementation:async function(e,t,n,r,{getAccounts:s}){return t.result=await s(),r()},hookNames:{getAccounts:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/eth-accounts.ts"}],[102,{"../../../../../shared/constants/app":5732,"../../../../../shared/constants/permissions":5752,"../../../../../shared/modules/network.utils":5798,"../../../controllers/permissions":29,"../../util":135,"@metamask/rpc-errors":2568},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.switchChain=async function(e,t,n,s,a,{isAddFlow:l,setActiveNetwork:c,endApprovalFlow:d,getCaveat:u,requestPermittedChainsPermission:h,grantPermittedChainsPermissionIncremental:p}){try{const{value:t}=u({target:i.PermissionNames.permittedChains,caveatType:o.CaveatTypes.restrictNetworkSwitching})??{};t!==undefined&&t.includes(n)||(l?await p([n]):await h([n])),await c(s),e.result=null}catch(n){return n.code===r.errorCodes.provider.userRejectedRequest&&a?(e.result=null,t()):t(n)}finally{a&&d({id:a})}return t()},n.validateAddEthereumChainParams=function(e){if(!e||"object"!=typeof e)throw r.rpcErrors.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e)}`});const{chainId:t,chainName:n,blockExplorerUrls:s,nativeCurrency:o,rpcUrls:i,...d}=e,u=Object.keys(d).filter((e=>!["iconUrls"].includes(e)));if(u.length>0)throw r.rpcErrors.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${u}`});const h=c(t);if(!i||!Array.isArray(i)||0===i.length)throw r.rpcErrors.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${i}`});const p=e=>{const t=(0,l.getValidUrl)(e);return null!==t&&("localhost"===t.hostname||"127.0.0.1"===t.hostname||"https:"===t.protocol)},m=i.find((e=>p(e))),g=Array.isArray(s)?s.find((e=>p(e))):null;if(!m)throw r.rpcErrors.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${i}`});if("string"!=typeof n||!n)throw r.rpcErrors.invalidParams({message:`Expected non-empty string 'chainName'. Received:\n${n}`});const C=n.length>100?n.substring(0,100):n;if(null!==o){if("object"!=typeof o||Array.isArray(o))throw r.rpcErrors.invalidParams({message:`Expected null or object 'nativeCurrency'. Received:\n${o}`});if(18!==o.decimals)throw r.rpcErrors.invalidParams({message:`Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${o.decimals}`});if(!o.symbol||"string"!=typeof o.symbol)throw r.rpcErrors.invalidParams({message:`Expected a string 'nativeCurrency.symbol'. Received: ${o.symbol}`})}const f=(null==o?void 0:o.symbol)||a.UNKNOWN_TICKER_SYMBOL;if(f!==a.UNKNOWN_TICKER_SYMBOL&&("string"!=typeof f||f.length<1||f.length>6))throw r.rpcErrors.invalidParams({message:`Expected 1-6 character string 'nativeCurrency.symbol'. Received:\n${f}`});return{chainId:h,chainName:C,firstValidBlockExplorerUrl:g,firstValidRPCUrl:m,ticker:f}},n.validateChainId=c,n.validateSwitchEthereumChainParams=function(e){var t;if(null===(t=e.params)||void 0===t||!t[0]||"object"!=typeof e.params[0])throw r.rpcErrors.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`});const{chainId:n,...s}=e.params[0];if(Object.keys(s).length>0)throw r.rpcErrors.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${Object.keys(s)}`});return c(n)};var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/modules/network.utils"),o=e("../../../../../shared/constants/permissions"),a=e("../../../../../shared/constants/app"),i=e("../../../controllers/permissions"),l=e("../../util");function c(e){const t="string"==typeof e&&e.toLowerCase();if(!(0,s.isPrefixedFormattedHexString)(t))throw r.rpcErrors.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${e}`});if(!(0,s.isSafeChainId)(parseInt(t,16)))throw r.rpcErrors.invalidParams({message:`Invalid chain ID "${t}": numerical value greater than max safe value. Received:\n${e}`});return t}}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/ethereum-chain-utils.js"}],[103,{"../../../../../shared/constants/app":5732},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.GET_PROVIDER_STATE],implementation:async function(e,t,n,r,{getProviderState:s}){return t.result={...await s(e.origin)},r()},hookNames:{getProviderState:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/get-provider-state.ts"}],[104,{"./add-ethereum-chain":100,"./eth-accounts":101,"./get-provider-state":103,"./log-web3-shim-usage":105,"./request-accounts":106,"./send-metadata":107,"./switch-ethereum-chain":108,"./watch-asset":109},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.legacyHandlers=n.handlers=void 0;var r=u(e("./add-ethereum-chain")),s=u(e("./eth-accounts")),o=u(e("./get-provider-state")),a=u(e("./log-web3-shim-usage")),i=u(e("./request-accounts")),l=u(e("./send-metadata")),c=u(e("./switch-ethereum-chain")),d=u(e("./watch-asset"));function u(e){return e&&e.__esModule?e:{default:e}}n.handlers=[r.default,o.default,a.default,i.default,l.default,c.default,d.default],n.legacyHandlers=[s.default]}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/index.ts"}],[105,{"../../../../../shared/constants/app":5732},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;const r={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],implementation:function(e,t,n,r,{getWeb3ShimUsageState:s,setWeb3ShimUsageRecorded:o}){const{origin:a}=e;s(a)===undefined&&o(a);return t.result=!0,r()},hookNames:{getWeb3ShimUsageState:!0,setWeb3ShimUsageRecorded:!0}};n.default=r}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/log-web3-shim-usage.ts"}],[106,{"../../../../../shared/constants/app":5732,"../../../../../shared/constants/metametrics":5744,"../../util":135,"@metamask/rpc-errors":2568},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/constants/app"),o=e("../../../../../shared/constants/metametrics"),a=e("../../util");const i={methodNames:[s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],implementation:async function(e,t,n,i,{origin:c,getAccounts:d,getUnlockPromise:u,hasPermission:h,requestAccountsPermission:p,sendMetrics:m,getPermissionsForOrigin:g,metamaskState:C}){if(l.has(c))return t.error=r.rpcErrors.resourceUnavailable(`Already processing ${s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`),i();if(h(s.MESSAGE_TYPE.ETH_ACCOUNTS)){try{l.add(c),await u(!0),t.result=await d(),i()}catch(e){i(e)}finally{l.delete(c)}return undefined}try{await p()}catch(e){return t.error=e,i()}const f=await d();if(f.length>0){t.result=f;const e=g(c).eth_accounts.caveats[0].value.length,n=!Object.keys(C.permissionHistory).includes(c);(0,a.shouldEmitDappViewedEvent)(C.metaMetricsId)&&m({event:o.MetaMetricsEventName.DappViewed,category:o.MetaMetricsEventCategory.InpageProvider,referrer:{url:c},properties:{is_first_visit:n,number_of_accounts:Object.keys(C.accounts).length,number_of_accounts_connected:e}})}else t.error=r.rpcErrors.internal("Accounts unexpectedly unavailable. Please report this bug.");return i()},hookNames:{origin:!0,getAccounts:!0,getUnlockPromise:!0,hasPermission:!0,requestAccountsPermission:!0,sendMetrics:!0,getPermissionsForOrigin:!0,metamaskState:!0}};n.default=i;const l=new Set}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/request-accounts.js"}],[107,{"../../../../../shared/constants/app":5732,"@metamask/rpc-errors":2568},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors");const s={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.SEND_METADATA],implementation:function(e,t,n,s,{addSubjectMetadata:o,subjectType:a}){const{origin:i,params:l}=e;if(!l||"object"!=typeof l||Array.isArray(l))return s(r.rpcErrors.invalidParams({data:l}));{const{icon:e=null,name:t=null,...n}=l;o({...n,iconUrl:e,name:t,subjectType:a,origin:i})}return t.result=!0,s()},hookNames:{addSubjectMetadata:!0,subjectType:!0}};n.default=s}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/send-metadata.js"}],[108,{"../../../../../shared/constants/app":5732,"./ethereum-chain-utils":102,"@metamask/rpc-errors":2568},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/rpc-errors"),s=e("../../../../../shared/constants/app"),o=e("./ethereum-chain-utils");const a={methodNames:[s.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],implementation:async function(e,t,n,a,{getNetworkConfigurationByChainId:i,setActiveNetwork:l,requestPermittedChainsPermission:c,getCaveat:d,getCurrentChainIdForDomain:u,grantPermittedChainsPermissionIncremental:h}){let p;try{p=(0,o.validateSwitchEthereumChainParams)(e)}catch(e){return a(e)}const{origin:m}=e;if(u(m)===p)return t.result=null,a();const g=i(p),C=null==g?void 0:g.rpcEndpoints[g.defaultRpcEndpointIndex].networkClientId;if(!C)return a(r.providerErrors.custom({code:4902,message:`Unrecognized chain ID "${p}". Try adding the chain using ${s.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`}));return(0,o.switchChain)(t,a,p,C,null,{setActiveNetwork:l,getCaveat:d,requestPermittedChainsPermission:c,grantPermittedChainsPermissionIncremental:h})},hookNames:{getNetworkConfigurationByChainId:!0,setActiveNetwork:!0,getCaveat:!0,requestPermittedChainsPermission:!0,getCurrentChainIdForDomain:!0,grantPermittedChainsPermissionIncremental:!0}};n.default=a}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/switch-ethereum-chain.js"}],[109,{"../../../../../shared/constants/app":5732,"@metamask/controller-utils":1423,"@metamask/rpc-errors":2568},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/controller-utils"),s=e("@metamask/rpc-errors"),o=e("../../../../../shared/constants/app");const a={methodNames:[o.MESSAGE_TYPE.WATCH_ASSET,o.MESSAGE_TYPE.WATCH_ASSET_LEGACY],implementation:async function(e,t,n,o,{handleWatchAssetRequest:a}){try{const{params:{options:n,type:i},origin:l,networkClientId:c}=e,{tokenId:d}=n;return[r.ERC721,r.ERC1155].includes(i)&&d!==undefined&&"string"!=typeof d?o(s.rpcErrors.invalidParams({message:`Expected parameter 'tokenId' to be type 'string'. Received type '${typeof d}'`})):(await a({asset:n,type:i,origin:l,networkClientId:c}),t.result=!0,o())}catch(e){return o(e)}},hookNames:{handleWatchAssetRequest:!0}};n.default=a}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/watch-asset.js"}],[11,{"../../../shared/constants/alerts":5730,"@metamask/base-controller":1397},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAlertControllerState=n.AlertController=void 0;var r=e("@metamask/base-controller"),s=e("../../../shared/constants/alerts");function o(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function a(e,t,n){return e.set(i(e,t),n),n}function i(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const l=()=>({alertEnabledness:s.TOGGLEABLE_ALERT_TYPES.reduce(((e,t)=>(e[t]=!0,e)),{}),unconnectedAccountAlertShownOrigins:{},web3ShimUsageOrigins:{}});n.getDefaultAlertControllerState=l;const c={alertEnabledness:{persist:!0,anonymous:!0},unconnectedAccountAlertShownOrigins:{persist:!0,anonymous:!1},web3ShimUsageOrigins:{persist:!0,anonymous:!1}};var d=new WeakMap,u=new WeakSet;class h extends r.BaseController{constructor(e){var t,n;super({messenger:e.messenger,metadata:c,name:"AlertController",state:{...l(),...e.state}}),o(t=this,n=u),n.add(t),function(e,t,n){o(e,t),t.set(e,n)}(this,d,void 0),a(d,this,this.messagingSystem.call("AccountsController:getSelectedAccount").address),this.messagingSystem.subscribe("AccountsController:selectedAccountChange",(e=>{this.state.unconnectedAccountAlertShownOrigins&&function(e,t){return e.get(i(e,t))}(d,this)!==e.address&&(a(d,this,e.address),this.update((e=>{e.unconnectedAccountAlertShownOrigins={}})))}))}setAlertEnabledness(e,t){this.update((n=>{n.alertEnabledness[e]=t}))}setUnconnectedAccountAlertShown(e){this.update((t=>{t.unconnectedAccountAlertShownOrigins[e]=!0}))}getWeb3ShimUsageState(e){var t;return null===(t=this.state.web3ShimUsageOrigins)||void 0===t?void 0:t[e]}setWeb3ShimUsageRecorded(e){i(u,this,p).call(this,e,s.Web3ShimUsageAlertStates.recorded)}setWeb3ShimUsageAlertDismissed(e){i(u,this,p).call(this,e,s.Web3ShimUsageAlertStates.dismissed)}}function p(e,t){this.update((n=>{n.web3ShimUsageOrigins&&(n.web3ShimUsageOrigins[e]=t)}))}n.AlertController=h}}},{package:"$root$",file:"app/scripts/controllers/alert-controller.ts"}],[110,{"./createMethodMiddleware":98,"./createUnsupportedMethodMiddleware":99},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./createMethodMiddleware");Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in n&&n[e]===r[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return r[e]}}))}));var s=e("./createUnsupportedMethodMiddleware");Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in n&&n[e]===s[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return s[e]}}))}))}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/index.js"}],[111,{"../util":135,"@segment/loosely-validate-event":3312,buffer:4037,"is-retry-allowed":4700,lodash:4866,"remove-trailing-slash":5285,timers:5601},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t,r){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=c(e("remove-trailing-slash")),o=c(e("@segment/loosely-validate-event")),a=e("lodash"),i=c(e("is-retry-allowed")),l=e("../util");function c(e){return e&&e.__esModule?e:{default:e}}const d=()=>({});n.default=class{constructor(e,t={}){this.writeKey=e,this.host=(0,s.default)(t.host||"https://api.segment.io"),this.flushInterval=t.flushInterval||1e4,this.flushAt=t.flushAt||Math.max(t.flushAt,1)||20,this.queue=[],this.path="/v1/batch",this.maxQueueSize=460800,this.flushed=!1,this.retryCount=3,Object.defineProperty(this,"enable",{configurable:!1,writable:!1,enumerable:!0,value:!0})}_validate(e,t){(0,o.default)(e,t)}_message(e,t,n){return this._validate(t,e),this.enqueue(e,t,n),this}identify(e,t){return this._message("identify",e,t)}track(e,t){return this._message("track",e,t)}page(e,t){return this._message("page",e,t)}enqueue(e,t,n=d){if(!this.enable)return void r(n);const s={...t,type:e};if(s.context={...s.context,library:{name:"analytics-node"}},s.timestamp||(s.timestamp=new Date),s.messageId||(s.messageId=(0,l.generateRandomId)()),s.anonymousId&&!(0,a.isString)(s.anonymousId)&&(s.anonymousId=JSON.stringify(s.anonymousId)),s.userId&&!(0,a.isString)(s.userId)&&(s.userId=JSON.stringify(s.userId)),this.queue.push({message:s,callback:n}),!this.flushed)return this.flushed=!0,void this.flush();const o=this.queue.length>=this.flushAt,i=this.queue.reduce(((e,t)=>e+JSON.stringify(t).length),0)>=this.maxQueueSize;(o||i)&&this.flush(),this.flushInterval&&!this.timer&&(this.timer=setTimeout(this.flush.bind(this),this.flushInterval))}flush(e=d){if(!this.enable)return r(e),Promise.resolve();if(this.timer&&(clearTimeout(this.timer),this.timer=null),!this.queue.length)return r(e),Promise.resolve();const n=this.queue.splice(0,this.flushAt),s=n.map((e=>e.callback)),o={batch:n.map((e=>e.message)),timestamp:new Date,sentAt:new Date},a={Authorization:`Basic ${t.from(this.writeKey,"utf8").toString("base64")}`};return this._sendRequest(`${this.host}${this.path}`,{method:"POST",body:JSON.stringify(o),headers:a},(t=>{r((()=>{s.forEach((e=>e(t,o))),e(t,o)}))}),0)}_retryRequest(e,t,n,r){const s=100*Math.pow(2,r);setTimeout((()=>{this._sendRequest(e,t,n,r+1)}),s)}async _sendRequest(e,t,n,r){return fetch(e,t).then((async s=>{if(s.ok)n();else if(this._isErrorRetryable({response:s})&&r<=this.retryCount)this._retryRequest(e,t,n,r);else{const e=new Error(s.statusText);n(e)}})).catch((s=>{this._isErrorRetryable(s)&&r<=this.retryCount?this._retryRequest(e,t,n,r):n(s)}))}_isErrorRetryable(e){return!!function(e){return!e.response&&Boolean(e.code)&&"ECONNABORTED"!==e.code&&(0,i.default)(e)}(e)||!!e.response&&(e.response.status>=500&&e.response.status<=599||429===e.response.status)}}}).call(this)}).call(this,e("buffer").Buffer,e("timers").setImmediate)}}},{package:"$root$",file:"app/scripts/lib/segment/analytics.js"}],[112,{"../../../../shared/constants/time":5760,"./analytics":111},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.segment=n.createSegmentMock=void 0;var r,s=e("../../../../shared/constants/time"),o=(r=e("./analytics"))&&r.__esModule?r:{default:r};const a="XdGJ17zKf3NjBPCDQ2UDjJjkx6FYBMGP",i=undefined,l=5*s.SECOND,c=(e=i)=>{const t={queue:[],flush(){t.queue.forEach((([e,t])=>{t()})),t.queue=[]},track(n,r=(()=>undefined)){t.queue.push([n,r]),t.queue.length>=e&&t.flush()},page(){},identify(){}};return t};n.createSegmentMock=c;n.segment=a?new o.default(a,{host:null,flushAt:i,flushInterval:l}):c(i)}}},{package:"$root$",file:"app/scripts/lib/segment/index.js"}],[116,{"../../../../shared/lib/trace":5775},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addPersonalMessage=async function({signatureParams:e,signatureController:t}){return s(e,t,"newUnsignedPersonalMessage")},n.addTypedMessage=async function({signatureParams:e,signatureController:t}){return s(e,t,"newUnsignedTypedMessage")};var r=e("../../../../shared/lib/trace");async function s(e,t,n){const[,s]=e,{id:o}=s,a=null==o?void 0:o.toString();(0,r.endTrace)({name:r.TraceName.Middleware,id:a});const i=await t[n](...e);return(0,r.endTrace)({name:r.TraceName.Signature,id:a}),i}}}},{package:"$root$",file:"app/scripts/lib/signature/util.ts"}],[117,{"./snap-keyring":120},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"getAccountsBySnapId",{enumerable:!0,get:function(){return r.getAccountsBySnapId}}),Object.defineProperty(n,"snapKeyringBuilder",{enumerable:!0,get:function(){return r.snapKeyringBuilder}});var r=e("./snap-keyring")}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/index.ts"}],[118,{"@metamask/keyring-api":2055,"@metamask/permission-controller":2315},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isProtocolAllowed=d,n.keyringSnapPermissionsBuilder=function(e,t){return()=>{if("metamask"===t)return a;if(o.includes(t))return l;const n=e.getSubjectMetadata(t);return(null==n?void 0:n.subjectType)===r.SubjectType.Website&&d(t)?i:[]}};var r=e("@metamask/permission-controller"),s=e("@metamask/keyring-api");const o=["https://portfolio.metamask.io"],a=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.FilterAccountChains,s.KeyringRpcMethod.DeleteAccount,s.KeyringRpcMethod.ListRequests,s.KeyringRpcMethod.GetRequest,s.KeyringRpcMethod.SubmitRequest,s.KeyringRpcMethod.RejectRequest],i=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.CreateAccount,s.KeyringRpcMethod.FilterAccountChains,s.KeyringRpcMethod.UpdateAccount,s.KeyringRpcMethod.DeleteAccount,s.KeyringRpcMethod.ExportAccount,s.KeyringRpcMethod.ListRequests,s.KeyringRpcMethod.GetRequest,s.KeyringRpcMethod.ApproveRequest,s.KeyringRpcMethod.RejectRequest],l=[s.KeyringRpcMethod.ListAccounts,s.KeyringRpcMethod.GetAccount,s.KeyringRpcMethod.GetAccountBalances,s.KeyringRpcMethod.SubmitRequest],c=["https:"];function d(e){try{const t=new URL(e);return c.includes(t.protocol)}catch(e){return!1}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/keyring-snaps-permissions.ts"}],[119,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getSnapAndHardwareInfoForMetrics=async function(e,t,n){var r,s,o;if(!n)return{};const a=n.call("AccountsController:getSelectedAccount"),i=a.address,{keyring:l}=a.metadata;let c;var d;null!==(r=a.metadata.snap)&&void 0!==r&&r.id&&(c=n.call("SnapController:get",null===(d=a.metadata.snap)||void 0===d?void 0:d.id));return{account_type:await e(i),device_model:await t(i),account_hardware_type:await async function(){var e;return null!=l&&null!==(e=l.type)&&void 0!==e&&e.includes("Hardware")?l.type:undefined}(),account_snap_type:null===(s=c)||void 0===s?void 0:s.id,account_snap_version:null===(o=c)||void 0===o?void 0:o.version}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/metrics.ts"}],[12,{"@metamask/base-controller":1397},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultAppMetadataControllerState=n.default=void 0;var r=e("@metamask/base-controller");function s(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function o(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const a=()=>({currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0});n.getDefaultAppMetadataControllerState=a;const i={currentAppVersion:{persist:!0,anonymous:!0},previousAppVersion:{persist:!0,anonymous:!0},previousMigrationVersion:{persist:!0,anonymous:!0},currentMigrationVersion:{persist:!0,anonymous:!0}};var l=new WeakSet;class c extends r.BaseController{constructor({state:e={},messenger:t,currentAppVersion:n="",currentMigrationVersion:r=0}){super({name:"AppMetadataController",metadata:i,state:{currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0,...e},messenger:t}),s(this,l),o(l,this,d).call(this,n),o(l,this,u).call(this,r)}}function d(e){const t=this.state.currentAppVersion;e!==t&&this.update((n=>{n.currentAppVersion=e,n.previousAppVersion=t}))}function u(e){const t=this.state.currentMigrationVersion;e!==t&&this.update((n=>{n.previousMigrationVersion=t,n.currentMigrationVersion=e}))}n.default=c}}},{package:"$root$",file:"app/scripts/controllers/app-metadata.ts"}],[120,{"../../../../shared/constants/app":5732,"../../../../shared/constants/metametrics":5744,"../../../../ui/components/component-library/icon":6296,"../../translate":300,"./utils/isBlockedUrl":121,"./utils/showResult":122,"@metamask/eth-snap-keyring":1732,"webextension-polyfill":5710},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getAccountsBySnapId=void 0,n.showAccountCreationDialog=h,n.showAccountNameSuggestionDialog=p,n.snapKeyringBuilder=void 0;var r,s=e("@metamask/eth-snap-keyring"),o=(r=e("webextension-polyfill"))&&r.__esModule?r:{default:r},a=e("../../../../shared/constants/metametrics"),i=e("../../../../shared/constants/app"),l=e("../../translate"),c=e("../../../../ui/components/component-library/icon"),d=e("./utils/isBlockedUrl"),u=e("./utils/showResult");async function h(e,t){try{return Boolean(await t.call("ApprovalController:addRequest",{origin:e,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation},!0))}catch(e){throw new Error(`Error occurred while showing account creation dialog.\n${e}`)}}async function p(e,t,n){try{return await t.call("ApprovalController:addRequest",{origin:e,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showNameSnapAccount,requestData:{snapSuggestedAccountName:n}},!0)}catch(e){throw new Error(`Error occurred while showing name account dialog.\n${e}`)}}n.getAccountsBySnapId=async(e,t)=>{const n=await e.getSnapKeyring();return await n.getAccountsBySnapId(t)};n.snapKeyringBuilder=(e,t,n,r,m,g,C)=>{const f=()=>new s.SnapKeyring(t(),{addressExists:async t=>(await e.call("KeyringController:getAccounts")).includes(t.toLowerCase()),redirectUser:async(t,n,r)=>{if(n.length>0||r.length>0){const s=await(0,d.isBlockedUrl)(n,(async()=>await e.call("PhishingController:maybeUpdateState")),(t=>e.call("PhishingController:testOrigin",t))),a=await e.call("ApprovalController:addRequest",{origin:t,requestData:{url:n,message:r,isBlockedUrl:s},type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect},!0);Boolean(a)&&n.length>0?o.default.tabs.create({url:n}):console.log("User refused snap account redirection to:",n)}else console.log("Error occurred when redirecting snap account. url or message must be defined")},saveState:async()=>{await n()},addAccount:async(t,r,s,o="",i=!1)=>{const d=g(r),{id:f}=e.call("ApprovalController:startFlow"),y=e=>{m({event:e,category:a.MetaMetricsEventCategory.Accounts,properties:{account_type:a.MetaMetricsEventAccountType.Snap,snap_id:r,snap_name:d}})};try{const m="https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-add-accounts-in-your-wallet/",g=C(r)&&!i,f=g||await h(r,e);if(!f)throw await s(f),new Error("User denied account creation");const v=await p(r,e,o);if(null==v||!v.success)throw await s(null==v?void 0:v.success),new Error("User denied account creation");try{await n(),await s(v.success);const o=e.call("AccountsController:getAccountByAddress",t);if(!o)throw new Error(`Internal account not found for address: ${t}`);e.call("AccountsController:setSelectedAccount",o.id),v.name&&e.call("AccountsController:setAccountName",o.id,v.name),g||(y(a.MetaMetricsEventName.AddSnapAccountSuccessViewed),await(0,u.showSuccess)(e,r,{icon:c.IconName.UserCircleAdd,title:(0,l.t)("snapAccountCreated")},{message:(0,l.t)("snapAccountCreatedDescription"),address:t,learnMoreLink:m}),y(a.MetaMetricsEventName.AddSnapAccountSuccessClicked)),y(a.MetaMetricsEventName.AccountAdded)}catch(t){const n=t.message;throw await(0,u.showError)(e,r,{icon:c.IconName.UserCircleAdd,title:(0,l.t)("snapAccountCreationFailed")},{message:(0,l.t)("snapAccountCreationFailedDescription",d),learnMoreLink:m,error:n}),new Error(`Error occurred while creating snap account: ${n}`)}}finally{e.call("ApprovalController:endFlow",{id:f})}},removeAccount:async(t,s,o)=>{const d=g(s),{id:h}=e.call("ApprovalController:startFlow"),p="https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-remove-an-account-from-your-metamask-wallet/",C=e=>{m({event:e,category:a.MetaMetricsEventCategory.Accounts,properties:{account_type:a.MetaMetricsEventAccountType.Snap,snap_id:s,snap_name:d}})};let f=!1;try{if(f=Boolean(await e.call("ApprovalController:addRequest",{origin:s,type:i.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval,requestData:{publicAddress:t}},!0)),!f)throw await o(f),new Error("User denied account removal");try{await r(t),await o(f),await n(),C(a.MetaMetricsEventName.RemoveSnapAccountSuccessViewed),await(0,u.showError)(e,s,{icon:c.IconName.UserCircleRemove,title:(0,l.t)("snapAccountRemoved")},{message:(0,l.t)("snapAccountRemovedDescription"),learnMoreLink:p}),C(a.MetaMetricsEventName.RemoveSnapAccountSuccessClicked)}catch(t){const n=t.message;throw await(0,u.showError)(e,s,{icon:c.IconName.UserCircleRemove,title:(0,l.t)("snapAccountRemovalFailed")},{message:(0,l.t)("snapAccountRemovalFailedDescription",d),learnMoreLink:p,error:n}),C(a.MetaMetricsEventName.AccountRemoveFailed),new Error(`Error occurred while removing snap account: ${n}`)}}finally{f&&C(a.MetaMetricsEventName.AccountRemoved),e.call("ApprovalController:endFlow",{id:h})}}});return f.type=s.SnapKeyring.type,f}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/snap-keyring.ts"}],[121,{"../keyring-snaps-permissions":118},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isBlockedUrl=void 0;var r=e("../keyring-snaps-permissions");n.isBlockedUrl=async(e,t,n)=>{try{return!(0,r.isProtocolAllowed)(e)||(await t(),n(e).result)}catch(e){return console.error("Invalid URL passed into snap-keyring:",e),!1}}}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/utils/isBlockedUrl.ts"}],[122,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.showSuccess=n.showError=void 0;const r=e=>({name:"SnapAuthorshipHeader",key:"snapHeader",properties:{snapId:e}});n.showError=(e,t,n,s)=>e.call("ApprovalController:showError",{header:[r(t)],title:n.title,icon:n.icon,error:{key:"snapAccountErrorMessage",name:"SnapAccountErrorMessage",properties:s}});n.showSuccess=(e,t,n,s)=>e.call("ApprovalController:showSuccess",{header:[r(t)],title:n.title,icon:n.icon,message:{key:"snapAccountSuccessMessage",name:"SnapAccountSuccessMessage",properties:s}})}}},{package:"$root$",file:"app/scripts/lib/snap-keyring/utils/showResult.ts"}],[123,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.sanitizeUIState=function(e){const t={...e};for(const e of r)delete t[e];return function(e){const t=e.snaps;if(!t)return;e.snaps=Object.values(t).reduce(((e,t)=>(e[t.id]=function(e){const t={...e};return delete t.sourceCode,delete t.auxiliaryFiles,t}(t),e)),{})}(t),t};const r=["snapStates","unencryptedSnapStates","vault"]}}},{package:"$root$",file:"app/scripts/lib/state-utils.ts"}],[125,{"../../../../../shared/lib/four-byte":5768,"@ethersproject/abi":506,"@metamask/utils":3224,"ethereumjs-util":4282},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionDataWithFourByte=async function(e){const t=e.slice(0,10),n=await(0,a.getMethodFrom4Byte)(t);if(!n)return undefined;const o=n.split("(")[0],u=function(e){let t=e.slice(e.indexOf("(")+1,-1);const n=[];for(;t.includes("(");){const e=d(t);if(!e)break;n.push(e.value),t=`${t.slice(0,e.start)}${n.length-1}#${t.slice(e.end+1)}`}return c(t,n)}(n);i("Generated inputs",u);const h=(0,r.addHexPrefix)(e.slice(10)),p=s.Interface.getAbiCoder().decode(u,h),m=u.map(((e,t)=>l(e,t,p)));return{name:o,params:m}};var r=e("ethereumjs-util"),s=e("@ethersproject/abi"),o=e("@metamask/utils"),a=e("../../../../../shared/lib/four-byte");const i=(0,o.createProjectLogger)("four-byte");function l(e,t,n){var r;const s=n[t],{type:o,name:a}=e;let i=null===(r=e.components)||void 0===r?void 0:r.map(((e,t)=>l(e,t,s)));if(o.endsWith("[]")){const t=o.slice(0,-2);i=s.map(((n,r)=>{const o=`Item ${r+1}`;return l({...e,name:o,type:t},r,s)}))}return{name:a,type:o,value:s,children:i}}function c(e,t){return e.split(",").map((e=>{const n=e.split("#"),r=n.length>1?parseInt(n[0],10):undefined;return{type:r===undefined?e:`tuple${n[1]??""}`,components:r===undefined?undefined:c(t[r],t)}}))}function d(e){let t=-1;for(let n=0;n<e.length;n++)if("("===e[n])t=n;else if(")"===e[n]&&-1!==t)return{start:t,end:n,value:e.slice(t+1,n)};return undefined}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/four-byte.ts"}],[126,{"ethereumjs-util":4282},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getContractProxyAddress=async function(e,t){const n=(await Promise.all(s.map((n=>t.request({method:"eth_getStorageAt",params:[e,n,"latest"]}))))).find((e=>(0,r.stripHexPrefix)(e)!==o));return n&&(0,r.addHexPrefix)(n.slice(26))};var r=e("ethereumjs-util");const s=["0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3","0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"],o="0".padEnd(64,"0")}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/proxy.ts"}],[127,{"@ethersproject/abi":506,"@metamask/utils":3224},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionDataWithSourcify=async function(e,t,n){var i,l;const c=await async function(e,t){var n;const r=await async function(e,t){const n=parseInt(t,16),r=await fetch(`https://sourcify.dev/server/files/any/${n}/${e}`);if(!r.ok)throw new Error("Failed to fetch Sourcify files");return r.json()}(e,t),s=null===(n=r.files)||void 0===n?void 0:n.find((e=>e.name.includes("metadata.json")));if(!s)throw new Error("Metadata not found");return JSON.parse(s.content)}(t,n);s("Retrieved Sourcify metadata",{contractAddress:t,chainId:n,metadata:c});const{abi:d}=c.output,u=new r.Interface(d),h=e.slice(0,10);let p;try{p=u.getFunction(h)}catch(e){}if(!p)return s("Failed to find function in ABI",h,d),undefined;const{name:m,inputs:g}=p,C=a(m,g),f=null===(i=c.output.userdoc)||void 0===i?void 0:i.methods[C],y=null===(l=c.output.devdoc)||void 0===l?void 0:l.methods[C],v=(null==f?void 0:f.notice)??(null==y?void 0:y.details);s("Extracted NatSpec",{signature:C,userDoc:f,devDoc:y});const w=u.decodeFunctionData(h,e),b=g.map(((e,t)=>o(e,t,w,f,y)));return{name:m,description:v,params:b}};var r=e("@ethersproject/abi");const s=(0,e("@metamask/utils").createProjectLogger)("sourcify");function o(e,t,n,r,s){var a,i;const{name:l,type:c,components:d}=e,u=(null==r||null===(a=r.params)||void 0===a?void 0:a[l])??(null==s||null===(i=s.params)||void 0===i?void 0:i[l]),h=n[t];let p=null==d?void 0:d.map(((e,t)=>o(e,t,h,{},{})));if(c.endsWith("[]")){const t=c.slice(0,-2);p=h.map(((n,r)=>{const s=`Item ${r+1}`;return o({...e,name:s,type:t},r,h,{},{})}))}return{name:l,description:u,type:c,value:h,children:p}}function a(e,t){return`${e??""}(${t.map((e=>{var t;return null!==(t=e.components)&&void 0!==t&&t.length?`${a(undefined,e.components)}${e.type.endsWith("[]")?"[]":""}`:e.type})).join(",")})`}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/sourcify.ts"}],[128,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_ROUTER_COMMANDS=void 0;n.UNISWAP_ROUTER_COMMANDS={0:{name:"V3_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},1:{name:"V3_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"bytes",description:"The UniswapV3 encoded path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},2:{name:"PERMIT2_TRANSFER_FROM",params:[{type:"address",description:"The token to fetch from Permit2",name:"token"},{type:"address",description:"The recipient of the tokens fetched",name:"recipient"},{type:"uint256",description:"The amount of token to fetch",name:"amount"}]},3:{name:"PERMIT2_PERMIT_BATCH",params:[{type:"bytes",description:"A PermitBatch struct outlining all of the Permit2 permits to execute.",name:"batch"},{type:"bytes",description:"The signature to provide to Permit2",name:"data"}]},4:{name:"SWEEP",params:[{type:"address",description:"The ERC20 token to sweep (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amountMin"}]},5:{name:"TRANSFER",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The amount to transfer",name:"value"}]},6:{name:"PAY_PORTION",params:[{type:"address",description:"The ERC20 token to transfer (or Constants.ETH for ETH)",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"In basis points, the percentage of the contract’s balance to transfer",name:"bips"}]},8:{name:"V2_SWAP_EXACT_IN",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of input tokens for the trade",name:"amountIn"},{type:"uint256",description:"The minimum amount of output tokens the user wants",name:"amountOutMin"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},9:{name:"V2_SWAP_EXACT_OUT",params:[{type:"address",description:"The recipient of the output of the trade",name:"recipient"},{type:"uint256",description:"The amount of output tokens to receive",name:"amountOut"},{type:"uint256",description:"The maximum number of input tokens that should be spent",name:"amountInMax"},{type:"address[]",description:"The UniswapV2 token path to trade along",name:"path"},{type:"bool",description:"A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter",name:"payerIsUser"}]},10:{name:"PERMIT2_PERMIT",params:[{type:"bytes",description:"A PermitSingle struct outlining the Permit2 permit to execute",name:"permitSingle"},{type:"bytes",description:"The signature to provide to Permit2",name:"signature"}]},11:{name:"WRAP_ETH",params:[{type:"address",description:"The recipient of the WETH",name:"recipient"},{type:"uint256",description:"The amount of ETH to wrap",name:"amountMin"}]},12:{name:"UNWRAP_WETH",params:[{type:"address",description:"The recipient of the ETH",name:"recipient"},{type:"uint256",description:"The minimum required ETH to receive from the unwrapping",name:"amountMin"}]},13:{name:"PERMIT2_TRANSFER_FROM_BATCH",params:[{type:"bytes",description:"An array of AllowanceTransferDetails structs that each describe a Permit2 transfer to perform",name:"batchDetails"}]},16:{name:"SEAPORT",params:[{type:"uint256",description:"The ETH value to forward to the Seaport contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Seaport contract",name:"data"}]},17:{name:"LOOKS_RARE_721",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},18:{name:"NFTX",params:[{type:"uint256",description:"The ETH value to forward to the NFTX contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFTX contract",name:"data"}]},19:{name:"CRYPTOPUNKS",params:[{type:"uint256",description:"The PunkID to purchase",name:"punkId"},{type:"address",description:"The recipient for the cryptopunk",name:"recipient"},{type:"uint256",description:"The ETH value to forward to the Cryptopunks contract",name:"value"}]},20:{name:"LOOKS_RARE_1155",params:[{type:"uint256",description:"The ETH value to forward to the LooksRare contract",name:"value"},{type:"bytes",description:"The calldata to use to call the LooksRare contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},21:{name:"OWNER_CHECK_721",params:[{type:"address",description:"The required owner of the ERC721",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},22:{name:"OWNER_CHECK_1155",params:[{type:"address",description:"The required owner of the ERC1155",name:"owner"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The minimum required amount of the ERC1155",name:"minBalance"}]},23:{name:"SWEEP_ERC721",params:[{type:"address",description:"The ERC721 token address to transfer",name:"token"},{type:"address",description:"The recipient of the transfer",name:"recipient"},{type:"uint256",description:"The token ID to transfer",name:"id"}]},24:{name:"X2Y2_721",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},25:{name:"SUDOSWAP",params:[{type:"uint256",description:"The ETH value to forward to the Sudoswap contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Sudoswap contract",name:"data"}]},26:{name:"NFT20",params:[{type:"uint256",description:"The ETH value to forward to the NFT20 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the NFT20 contract",name:"data"}]},27:{name:"X2Y2_1155",params:[{type:"uint256",description:"The ETH value to forward to the X2Y2 contract",name:"value"},{type:"bytes",description:"The calldata to use to call the X2Y2 contract",name:"data"},{type:"address",description:"The recipient of the ERC1155",name:"recipient"},{type:"address",description:"The ERC1155 token address",name:"token"},{type:"uint256",description:"The ID of the ERC1155",name:"id"},{type:"uint256",description:"The amount of the ERC1155 to transfer",name:"amount"}]},28:{name:"FOUNDATION",params:[{type:"uint256",description:"The ETH value to forward to the Foundation contract",name:"value"},{type:"bytes",description:"The calldata to use to call the Foundation contract",name:"data"},{type:"address",description:"The recipient of the ERC721",name:"recipient"},{type:"address",description:"The ERC721 token address",name:"token"},{type:"uint256",description:"The ID of the ERC721",name:"id"}]},29:{name:"SWEEP_ERC1155",params:[{type:"address",description:"The ERC1155 token address to sweep",name:"token"},{type:"address",description:"The recipient of the sweep",name:"recipient"},{type:"uint256",description:"The token ID to sweep",name:"id"},{type:"uint256",description:"The minimum required tokens to receive from the sweep",name:"amount"}]}}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap-commands.ts"}],[129,{"../../../../../shared/constants/network":5748,"./uniswap-commands":128,"@ethersproject/abi":506,"ethereumjs-util":4282},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES=void 0,n.decodeUniswapRouterTransactionData=function({transactionData:e,contractAddress:t,chainId:n}){const o=c[n];if(null==o||!o.map((e=>e.toLowerCase())).includes(t.toLowerCase()))return undefined;const u=new r.Interface(d);let h;try{h=u.parseTransaction({data:e})}catch(e){return undefined}const p=h.args.commands,m=h.args.inputs;return p.slice(2).match(/.{1,2}/gu).map(((e,t)=>function(e,t){const n=parseInt(e,16),o=31&n,c=a.UNISWAP_ROUTER_COMMANDS[String(o)];if(!c)return undefined;const d=c.params.map((e=>e.type)),u=r.Interface.getAbiCoder().decode(d,t),{name:h}=c,p=c.params.map(((e,t)=>{const{name:n,type:r,description:o}=e,a=u[t];return{name:n,type:r,value:"path"===n?function(e){const t=[];let n=(0,s.stripHexPrefix)(e),r={},o=!0;for(;n.length;){if(o){const e=(0,s.addHexPrefix)(n.slice(0,i));r.firstAddress?(r.secondAddress=e,t.push(r),r={firstAddress:e}):r.firstAddress=e,n=n.slice(i)}else r.tickSpacing=parseInt(n.slice(0,l),16),n=n.slice(l);o=!o}return t}(a):a,description:o}}));return{name:h,params:p}}(e,m[t]))).filter((e=>e!==undefined))};var r=e("@ethersproject/abi"),s=e("ethereumjs-util"),o=e("../../../../../shared/constants/network"),a=e("./uniswap-commands");const i=40,l=6,c=n.UNISWAP_UNIVERSAL_ROUTER_ADDRESSES={[o.CHAIN_IDS.ARBITRUM]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x5E325eDA8064b456f4781070C0738d849c824258"],[o.CHAIN_IDS.AVALANCHE]:["0x82635AF6146972cD6601161c4472ffe97237D292","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[o.CHAIN_IDS.BASE]:["0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[o.CHAIN_IDS.BSC]:["0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0x4Dae2f939ACf50408e13d58534Ff8c2776d45265"],[o.CHAIN_IDS.MAINNET]:["0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B","0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"],[o.CHAIN_IDS.OPTIMISM]:["0xb555edF5dcF85f42cEeF1f3630a52A108E55A654","0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4","0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8"],[o.CHAIN_IDS.POLYGON]:["0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5","0x643770E279d5D0733F21d6DC03A8efbABf3255B4","0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2"],[o.CHAIN_IDS.SEPOLIA]:["0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD"]},d=[{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"},{name:"deadline",type:"uint256"}],name:"execute",type:"function"},{constant:!0,inputs:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"}],name:"execute",type:"function"}]}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/uniswap.ts"}],[13,{"../../../shared/constants/alarms":5729,"../../../shared/constants/app":5732,"../../../shared/constants/preferences":5753,"../../../shared/constants/time":5760,"../../../shared/modules/mv3.utils":5797,"../../../ui/helpers/utils/build-types":6773,"@metamask/base-controller":1397,"@metamask/controller-utils":1423,loglevel:4872,uuid:5660},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.AppStateController=void 0;var r,s=e("uuid"),o=(r=e("loglevel"))&&r.__esModule?r:{default:r},a=e("@metamask/controller-utils"),i=e("@metamask/base-controller"),l=e("../../../shared/constants/time"),c=e("../../../shared/constants/alarms"),d=e("../../../shared/modules/mv3.utils"),u=e("../../../ui/helpers/utils/build-types"),h=e("../../../shared/constants/app"),p=e("../../../shared/constants/preferences");function m(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t,n){C(e,t),t.set(e,n)}function C(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function f(e,t){return e.get(v(e,t))}function y(e,t,n){return e.set(v(e,t),n),n}function v(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const w={timeoutMinutes:{persist:!0,anonymous:!0},connectedStatusPopoverHasBeenShown:{persist:!0,anonymous:!0},defaultHomeActiveTabName:{persist:!0,anonymous:!0},browserEnvironment:{persist:!0,anonymous:!0},popupGasPollTokens:{persist:!1,anonymous:!0},notificationGasPollTokens:{persist:!1,anonymous:!0},fullScreenGasPollTokens:{persist:!1,anonymous:!0},recoveryPhraseReminderHasBeenShown:{persist:!0,anonymous:!0},recoveryPhraseReminderLastShown:{persist:!0,anonymous:!0},outdatedBrowserWarningLastShown:{persist:!0,anonymous:!0},nftsDetectionNoticeDismissed:{persist:!0,anonymous:!0},showTestnetMessageInDropdown:{persist:!0,anonymous:!0},showBetaHeader:{persist:!0,anonymous:!0},showPermissionsTour:{persist:!0,anonymous:!0},showNetworkBanner:{persist:!0,anonymous:!0},showAccountBanner:{persist:!0,anonymous:!0},trezorModel:{persist:!0,anonymous:!0},currentPopupId:{persist:!1,anonymous:!0},onboardingDate:{persist:!0,anonymous:!0},lastViewedUserSurvey:{persist:!0,anonymous:!0},newPrivacyPolicyToastClickedOrClosed:{persist:!0,anonymous:!0},newPrivacyPolicyToastShownDate:{persist:!0,anonymous:!0},hadAdvancedGasFeesSetPriorToMigration92_3:{persist:!0,anonymous:!0},qrHardware:{persist:!1,anonymous:!0},nftsDropdownState:{persist:!1,anonymous:!0},surveyLinkLastClickedOrClosed:{persist:!0,anonymous:!0},signatureSecurityAlertResponses:{persist:!1,anonymous:!0},switchedNetworkDetails:{persist:!1,anonymous:!0},switchedNetworkNeverShowMessage:{persist:!0,anonymous:!0},currentExtensionPopupId:{persist:!1,anonymous:!0},lastInteractedConfirmationInfo:{persist:!0,anonymous:!0},termsOfUseLastAgreed:{persist:!0,anonymous:!0},snapsInstallPrivacyWarningShown:{persist:!0,anonymous:!0},interactiveReplacementToken:{persist:!0,anonymous:!0},noteToTraderMessage:{persist:!0,anonymous:!0},custodianDeepLink:{persist:!0,anonymous:!0},slides:{persist:!0,anonymous:!0}};var b=new WeakMap,k=new WeakMap,S=new WeakMap,A=new WeakMap,T=new WeakSet;class M extends i.BaseController{constructor({state:e={},messenger:t,addUnlockListener:n,isUnlocked:r,onInactiveTimeout:s,extension:o}){super({name:"AppStateController",metadata:w,state:{timeoutMinutes:p.DEFAULT_AUTO_LOCK_TIME_LIMIT,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),outdatedBrowserWarningLastShown:null,nftsDetectionNoticeDismissed:!1,showTestnetMessageInDropdown:!0,showBetaHeader:(0,u.isBeta)(),showPermissionsTour:!0,showNetworkBanner:!0,showAccountBanner:!0,trezorModel:null,onboardingDate:null,lastViewedUserSurvey:null,newPrivacyPolicyToastClickedOrClosed:null,newPrivacyPolicyToastShownDate:null,hadAdvancedGasFeesSetPriorToMigration92_3:!1,surveyLinkLastClickedOrClosed:null,switchedNetworkNeverShowMessage:!1,slides:[],qrHardware:{},nftsDropdownState:{},signatureSecurityAlertResponses:{},switchedNetworkDetails:null,currentExtensionPopupId:0,...e,qrHardware:{},nftsDropdownState:{},signatureSecurityAlertResponses:{},switchedNetworkDetails:null,currentExtensionPopupId:0},messenger:t}),function(e,t){C(e,t),t.add(e)}(this,T),g(this,b,void 0),g(this,k,void 0),g(this,S,void 0),m(this,"isUnlocked",void 0),m(this,"waitingForUnlock",void 0),g(this,A,void 0),y(b,this,o),y(k,this,s||(()=>undefined)),y(S,this,null),this.isUnlocked=r,this.waitingForUnlock=[],n(v(T,this,P).bind(this)),t.subscribe("PreferencesController:stateChange",(({preferences:e})=>{const t=this.state;"number"==typeof(null==e?void 0:e.autoLockTimeLimit)&&t.timeoutMinutes!==e.autoLockTimeLimit&&v(T,this,N).call(this,e.autoLockTimeLimit)})),t.subscribe("KeyringController:qrKeyringStateChange",(e=>this.update((t=>{t.qrHardware=e}))));const{preferences:a}=t.call("PreferencesController:getState");"number"==typeof a.autoLockTimeLimit&&v(T,this,N).call(this,a.autoLockTimeLimit),y(A,this,null)}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():v(T,this,E).call(this,t,e)}))}setDefaultHomeActiveTabName(e){this.update((t=>{t.defaultHomeActiveTabName=e}))}setConnectedStatusPopoverHasBeenShown(){this.update((e=>{e.connectedStatusPopoverHasBeenShown=!0}))}setRecoveryPhraseReminderHasBeenShown(){this.update((e=>{e.recoveryPhraseReminderHasBeenShown=!0}))}setSurveyLinkLastClickedOrClosed(e){this.update((t=>{t.surveyLinkLastClickedOrClosed=e}))}setOnboardingDate(){this.update((e=>{e.onboardingDate=Date.now()}))}setLastViewedUserSurvey(e){this.update((t=>{t.lastViewedUserSurvey=e}))}setNewPrivacyPolicyToastClickedOrClosed(){this.update((e=>{e.newPrivacyPolicyToastClickedOrClosed=!0}))}setNewPrivacyPolicyToastShownDate(e){this.update((t=>{t.newPrivacyPolicyToastShownDate=e}))}updateSlides(e){this.update((t=>{const n=t.slides||[],r=n.map((t=>{const n=e.find((e=>e.id===t.id));return n?{...t,undismissable:n.undismissable}:t})),s=e.filter((e=>!n.some((t=>t.id===e.id))));t.slides=[...r,...s]}))}removeSlide(e){this.update((t=>{const n=t.slides||[];t.slides=n.map((t=>t.id===e?{...t,dismissed:!0}:t))}))}setRecoveryPhraseReminderLastShown(e){this.update((t=>{t.recoveryPhraseReminderLastShown=e}))}setTermsOfUseLastAgreed(e){this.update((t=>{t.termsOfUseLastAgreed=e}))}setSnapsInstallPrivacyWarningShownStatus(e){this.update((t=>{t.snapsInstallPrivacyWarningShown=e}))}setOutdatedBrowserWarningLastShown(e){this.update((t=>{t.outdatedBrowserWarningLastShown=e}))}setLastActiveTime(){v(T,this,_).call(this)}setBrowserEnvironment(e,t){this.update((n=>{n.browserEnvironment={os:e,browser:t}}))}addPollingToken(e,t){t.toString()!==h.POLLING_TOKEN_ENVIRONMENT_TYPES[h.ENVIRONMENT_TYPE_BACKGROUND]&&v(T,this,R).call(this,t)&&v(T,this,I).call(this,e,t)}removePollingToken(e,t){if(t.toString()!==h.POLLING_TOKEN_ENVIRONMENT_TYPES[h.ENVIRONMENT_TYPE_BACKGROUND]){const n=this.state[t];v(T,this,R).call(this,t)&&this.update((r=>{r[t]=n.filter((t=>t!==e))}))}}clearPollingTokens(){this.update((e=>{e.popupGasPollTokens=[],e.notificationGasPollTokens=[],e.fullScreenGasPollTokens=[]}))}setShowTestnetMessageInDropdown(e){this.update((t=>{t.showTestnetMessageInDropdown=e}))}setShowBetaHeader(e){this.update((t=>{t.showBetaHeader=e}))}setShowPermissionsTour(e){this.update((t=>{t.showPermissionsTour=e}))}setShowNetworkBanner(e){this.update((t=>{t.showNetworkBanner=e}))}setShowAccountBanner(e){this.update((t=>{t.showAccountBanner=e}))}setCurrentExtensionPopupId(e){this.update((t=>{t.currentExtensionPopupId=e}))}setSwitchedNetworkDetails(e){this.update((t=>{t.switchedNetworkDetails=e}))}clearSwitchedNetworkDetails(){this.update((e=>{e.switchedNetworkDetails=null}))}setSwitchedNetworkNeverShowMessage(e){this.update((t=>{t.switchedNetworkDetails=null,t.switchedNetworkNeverShowMessage=e}))}setTrezorModel(e){this.update((t=>{t.trezorModel=e}))}updateNftDropDownState(e){this.update((t=>{t.nftsDropdownState=e}))}getSignatureSecurityAlertResponse(e){return this.state.signatureSecurityAlertResponses[e]}addSignatureSecurityAlertResponse(e){e.securityAlertId&&this.update((t=>{t.signatureSecurityAlertResponses[String(e.securityAlertId)]=e}))}setCurrentPopupId(e){this.update((t=>{t.currentPopupId=e}))}getLastInteractedConfirmationInfo(){return this.state.lastInteractedConfirmationInfo}setLastInteractedConfirmationInfo(e){this.update((t=>{t.lastInteractedConfirmationInfo=e}))}getCurrentPopupId(){return this.state.currentPopupId}}function E(e,t){this.waitingForUnlock.push({resolve:e}),this.messagingSystem.publish("AppStateController:unlockChange"),t&&v(T,this,O).call(this)}function P(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;){var e;null===(e=this.waitingForUnlock.shift())||void 0===e||e.resolve()}this.messagingSystem.publish("AppStateController:unlockChange")}v(T,this,B).call(this)}function N(e){this.update((t=>{t.timeoutMinutes=e})),v(T,this,_).call(this)}function _(){const{timeoutMinutes:e}=this.state;if(f(S,this)?clearTimeout(f(S,this)):d.isManifestV3&&f(b,this).alarms.clear(c.AUTO_LOCK_TIMEOUT_ALARM),!e)return;const t=Number(e);d.isManifestV3?(f(b,this).alarms.create(c.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:t,periodInMinutes:t}),f(b,this).alarms.onAlarm.addListener((e=>{e.name===c.AUTO_LOCK_TIMEOUT_ALARM&&(f(k,this).call(this),f(b,this).alarms.clear(c.AUTO_LOCK_TIMEOUT_ALARM))}))):y(S,this,setTimeout((()=>f(k,this).call(this)),t*l.MINUTE))}function I(e,t){this.update((n=>{n[t].push(e)}))}function R(e){return["popupGasPollTokens","notificationGasPollTokens","fullScreenGasPollTokens"].includes(e)}function O(){f(A,this)||(y(A,this,(0,s.v4)()),this.messagingSystem.call("ApprovalController:addRequest",{id:f(A,this),origin:h.ORIGIN_METAMASK,type:a.ApprovalType.Unlock},!0).catch((()=>{y(A,this,null)})))}function B(){if(f(A,this)){try{this.messagingSystem.call("ApprovalController:acceptRequest",f(A,this))}catch(e){o.default.error("Failed to unlock approval request",e)}y(A,this,null)}}n.AppStateController=M}}},{package:"$root$",file:"app/scripts/controllers/app-state-controller.ts"}],[130,{"../../../../../shared/types/transaction-decode":5818,"./four-byte":125,"./proxy":126,"./sourcify":127,"./uniswap":129,"@metamask/utils":3224},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeTransactionData=async function({transactionData:e,contractAddress:t,chainId:n,provider:r}){c("Decoding transaction data",{transactionData:e,contractAddress:t,chainId:n});const u=(0,o.decodeUniswapRouterTransactionData)({transactionData:e,contractAddress:t,chainId:n});if(u)return c("Decoded with Uniswap commands",u),{data:d(u),source:s.DecodedTransactionDataSource.Uniswap};const h=await(0,i.getContractProxyAddress)(t,r);h&&c("Retrieved proxy implementation address",h);const p=h??t,m=(0,a.decodeTransactionDataWithSourcify)(e,p,n),g=(0,l.decodeTransactionDataWithFourByte)(e),[C,f]=await Promise.allSettled([m,g]);if("fulfilled"===C.status&&C.value)return c("Decoded data with Sourcify",C.value),{data:d([C.value]),source:s.DecodedTransactionDataSource.Sourcify};if(c("Failed to decode data with Sourcify",C),"fulfilled"===f.status&&f.value)return c("Decoded data with 4Byte",f.value),{data:d([f.value]),source:s.DecodedTransactionDataSource.FourByte};return c("Failed to decode data with 4Byte",f),undefined};var r=e("@metamask/utils"),s=e("../../../../../shared/types/transaction-decode"),o=e("./uniswap"),a=e("./sourcify"),i=e("./proxy"),l=e("./four-byte");const c=(0,r.createProjectLogger)("transaction-decode");function d(e){return e.map((e=>function(e){return{...e,params:e.params.map((e=>u(e)))}}(e)))}function u(e){var t;return{...e,value:h(e.value),children:null===(t=e.children)||void 0===t?void 0:t.map((e=>u(e)))}}function h(e){const t=e._hex;return t?parseInt(t,16):e}}}},{package:"$root$",file:"app/scripts/lib/transaction/decode/util.ts"}],[131,{"../../../../shared/constants/app":5732,"../../../../shared/constants/gas":5739,"../../../../shared/constants/metametrics":5744,"../../../../shared/constants/transaction":5762,"../../../../shared/lib/confirmation.utils":5765,"../../../../shared/lib/transactions-controller-utils":5776,"../../../../shared/modules/conversion.utils":5788,"../../../../shared/modules/metametrics":5796,"../../../../shared/modules/transaction.utils":5813,"../../../../ui/helpers/utils/metrics":6783,"../snap-keyring/metrics":119,"@metamask/transaction-controller":3162,"bignumber.js":3941,"ethereumjs-util":4282},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.handleTransactionSubmitted=n.handleTransactionRejected=n.handleTransactionFailed=n.handleTransactionDropped=n.handleTransactionConfirmed=n.handleTransactionApproved=n.handleTransactionAdded=n.handlePostTransactionBalanceUpdate=n.createTransactionEventFragmentWithTxId=n.METRICS_STATUS_FAILED=void 0;var r=e("bignumber.js"),s=e("ethereumjs-util"),o=e("@metamask/transaction-controller"),a=e("../../../../shared/constants/app"),i=e("../../../../shared/constants/gas"),l=e("../../../../shared/constants/metametrics"),c=e("../../../../shared/constants/transaction"),d=e("../../../../shared/lib/transactions-controller-utils"),u=e("../../../../shared/modules/conversion.utils"),h=e("../../../../shared/modules/metametrics"),p=e("../../../../shared/modules/transaction.utils"),m=e("../../../../ui/helpers/utils/metrics"),g=e("../snap-keyring/metrics"),C=e("../../../../shared/lib/confirmation.utils");const f=n.METRICS_STATUS_FAILED="failed on-chain";n.handleTransactionAdded=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await b({transactionEventPayload:t,transactionMetricsRequest:e});y({eventName:c.TransactionMetaMetricsEvent.added,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.handleTransactionApproved=async(e,t)=>{t.transactionMeta&&await v({eventName:c.TransactionMetaMetricsEvent.approved,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionFailed=async(e,t)=>{if(!t.transactionMeta)return;const n={};t.error&&(n.error=t.error),await v({eventName:c.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionConfirmed=async(e,t)=>{if(0===Object.keys(t).length)return;const n={},r={...t},{txReceipt:s}=r;n.gas_used=null==s?void 0:s.gasUsed,n.block_number=(null==s?void 0:s.blockNumber)&&(0,u.hexToDecimal)(s.blockNumber);const{submittedTime:o,blockTimestamp:a}=r;o&&(n.completion_time=function(e){return Math.round((Date.now()-e)/1e3).toString()}(o)),o&&a&&(n.completion_time_onchain=function(e,t){const n=2,r=Number((0,u.hexToDecimal)(t))-e/1e3;return(Math.round(r*10**n)/10**n).toString()}(o,a)),"0x0"===(null==s?void 0:s.status)&&(n.status=f),await v({eventName:c.TransactionMetaMetricsEvent.finalized,extraParams:n,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e})};n.handleTransactionDropped=async(e,t)=>{if(!t.transactionMeta)return;await v({eventName:c.TransactionMetaMetricsEvent.finalized,extraParams:{dropped:!0},transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionRejected=async(e,t)=>{t.transactionMeta&&await v({eventName:c.TransactionMetaMetricsEvent.rejected,transactionEventPayload:t,transactionMetricsRequest:e})};n.handleTransactionSubmitted=async(e,t)=>{if(!t.transactionMeta)return;const{properties:n,sensitiveProperties:r}=await b({transactionEventPayload:t,transactionMetricsRequest:e});y({eventName:c.TransactionMetaMetricsEvent.submitted,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:n,sensitiveProperties:r}})};n.createTransactionEventFragmentWithTxId=async(e,{transactionId:t,actionId:n})=>{const r={...e.getTransaction(t),actionId:n},{properties:s,sensitiveProperties:o}=await b({transactionEventPayload:{transactionMeta:r},transactionMetricsRequest:e});y({eventName:c.TransactionMetaMetricsEvent.approved,transactionEventPayload:{actionId:r.actionId,transactionMeta:r},transactionMetricsRequest:e,payload:{properties:s,sensitiveProperties:o}})};function y({eventName:e,transactionEventPayload:{transactionMeta:t,actionId:n},transactionMetricsRequest:r,payload:s}){if(function(e,t,n){const r=w(t,n.id);return void 0!==e(r)}(r.getEventFragmentById,e,t)&&e!==c.TransactionMetaMetricsEvent.submitted)return;const o=w(e,t.id);switch(e){case c.TransactionMetaMetricsEvent.added:r.createEventFragment({category:l.MetaMetricsEventCategory.Transactions,initialEvent:c.TransactionMetaMetricsEvent.added,successEvent:c.TransactionMetaMetricsEvent.approved,failureEvent:c.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case c.TransactionMetaMetricsEvent.approved:case c.TransactionMetaMetricsEvent.rejected:r.createEventFragment({category:l.MetaMetricsEventCategory.Transactions,successEvent:c.TransactionMetaMetricsEvent.approved,failureEvent:c.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case c.TransactionMetaMetricsEvent.submitted:r.createEventFragment({category:l.MetaMetricsEventCategory.Transactions,initialEvent:c.TransactionMetaMetricsEvent.submitted,successEvent:c.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0});break;case c.TransactionMetaMetricsEvent.finalized:r.createEventFragment({category:l.MetaMetricsEventCategory.Transactions,successEvent:c.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:n,uniqueIdentifier:o,persist:!0})}}async function v({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r={}}){const{properties:s,sensitiveProperties:o}=await b({transactionEventPayload:t,transactionMetricsRequest:n,extraParams:r});y({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionEventPayload:{transactionMeta:t},transactionMetricsRequest:n,payload:r}){const s=w(e,t.id);switch(e){case c.TransactionMetaMetricsEvent.approved:case c.TransactionMetaMetricsEvent.rejected:case c.TransactionMetaMetricsEvent.finalized:n.updateEventFragment(s,{properties:r.properties,sensitiveProperties:r.sensitiveProperties})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionMetricsRequest:t,transactionEventPayload:{transactionMeta:n}}){const r=w(e,n.id);switch(e){case c.TransactionMetaMetricsEvent.approved:case c.TransactionMetaMetricsEvent.finalized:t.finalizeEventFragment(r);break;case c.TransactionMetaMetricsEvent.rejected:t.finalizeEventFragment(r,{abandoned:!0})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:n})}function w(e,t){return`transaction-${e===c.TransactionMetaMetricsEvent.finalized||e===c.TransactionMetaMetricsEvent.submitted?"submitted":"added"}-${t}`}async function b({transactionEventPayload:{transactionMeta:e},transactionMetricsRequest:t,extraParams:n={}}){var f;const{type:y,time:v,status:w,chainId:b,origin:k,txParams:{gasPrice:S,gas:A,maxFeePerGas:T,maxPriorityFeePerGas:M,estimateSuggested:E,estimateUsed:P},defaultGasEstimates:N,originalType:_,replacedById:I,customTokenAmount:R,dappProposedTokenAmount:O,currentTokenBalance:B,originalApprovalAmount:D,finalApprovalAmount:x,securityProviderResponse:F,simulationFails:U,id:L,userFeeLevel:j}=e,$=k===a.ORIGIN_METAMASK?"user":"dapp",K="dappSuggested"===j?"dapp_proposed":j,{assetType:q,tokenStandard:H}=await(0,p.determineTransactionAssetType)(e,t.provider,t.getTokenStandardAndDetails);let G;if(e.txParams.data){const n=await t.getMethodData(e.txParams.data);G=null==n?void 0:n.name}const W={};if((0,p.isEIP1559Transaction)(e)?(W.max_fee_per_gas=T,W.max_priority_fee_per_gas=M):(W.gas_price=S,W.default_estimate=l.MetaMetricsEventTransactionEstimateType.DefaultEstimate),N){var V,z;const{estimateType:n}=N;if(n){var Y,Q;W.default_estimate=n===i.PriorityLevels.dAppSuggested?l.MetaMetricsEventTransactionEstimateType.DappProposed:n;let r=null===(Y=e.defaultGasEstimates)||void 0===Y?void 0:Y.maxFeePerGas,s=null===(Q=e.defaultGasEstimates)||void 0===Q?void 0:Q.maxPriorityFeePerGas;if([i.GasRecommendations.low,i.GasRecommendations.medium,i.GasRecommendations.high].includes(n)){var J,X;const{gasFeeEstimates:e}=await t.getEIP1559GasFeeEstimates();var Z,ee;if(null!=e&&null!==(J=e[n])&&void 0!==J&&J.suggestedMaxFeePerGas)r=null===(Z=e[n])||void 0===Z?void 0:Z.suggestedMaxFeePerGas,W.default_max_fee_per_gas=r;if(null!=e&&null!==(X=e[n])&&void 0!==X&&X.suggestedMaxPriorityFeePerGas)s=null===(ee=e[n])||void 0===ee?void 0:ee.suggestedMaxPriorityFeePerGas,W.default_max_priority_fee_per_gas=s}}null!==(V=e.defaultGasEstimates)&&void 0!==V&&V.gas&&(W.default_gas=e.defaultGasEstimates.gas),null!==(z=e.defaultGasEstimates)&&void 0!==z&&z.gasPrice&&(W.default_gas_price=e.defaultGasEstimates.gasPrice)}E&&(W.estimate_suggested=E),P&&(W.estimate_used=P),null!=n&&n.gas_used&&(W.gas_used=n.gas_used);const te=function(e){const t={};for(const n in e)(0,s.isHexString)(e[n])?t[n]=(0,u.hexWEIToDecGWEI)(e[n]):t[n]=e[n];return t}(W);let ne="0";e.txParams.maxFeePerGas&&(ne="2");const re=y&&[o.TransactionType.contractInteraction,o.TransactionType.tokenMethodApprove,o.TransactionType.tokenMethodIncreaseAllowance,o.TransactionType.tokenMethodSafeTransferFrom,o.TransactionType.tokenMethodSetApprovalForAll,o.TransactionType.tokenMethodTransfer,o.TransactionType.tokenMethodTransferFrom,o.TransactionType.swap,o.TransactionType.swapAndSend,o.TransactionType.swapApproval].includes(y),se="Approve";let oe,ae,ie,le,ce,de,ue=o.TransactionType.simpleSend;if(y===o.TransactionType.swapAndSend)ue=o.TransactionType.swapAndSend;else if(y===o.TransactionType.cancel)ue=o.TransactionType.cancel;else if(y===o.TransactionType.retry&&_)ue=_;else if(y===o.TransactionType.deployContract)ue=o.TransactionType.deployContract;else if(re){var he,pe;ue=o.TransactionType.contractInteraction,ae=G,ce=null===(he=e.txParams)||void 0===he?void 0:he.to,de=null===(pe=e.txParams)||void 0===pe||null===(pe=pe.data)||void 0===pe?void 0:pe.slice(0,10),ae===se&&H===c.TokenStandard.ERC20&&("0"===O||"0"===R?oe=c.TransactionApprovalAmountType.revoke:R&&R!==O?oe=c.TransactionApprovalAmountType.custom:O&&(oe=c.TransactionApprovalAmountType.dappProposed),ie=function(e,t,n){if(e===c.TransactionApprovalAmountType.custom&&t&&n)return`${new r.BigNumber(t,10).div(n,10).times(100).round(2)}`;return null}(oe,D,x),le=function(e,t,n){if((e===c.TransactionApprovalAmountType.custom||e===c.TransactionApprovalAmountType.dappProposed)&&t&&n)return`${new r.BigNumber(t,16).div(n,10).times(100).round(2)}`;return null}(oe,O,B))}const me=t.getTransaction(I),ge={RETRY:o.TransactionType.retry,CANCEL:o.TransactionType.cancel,SAME_NONCE:"other"};let Ce;null!=n&&n.dropped&&(Ce=ge.SAME_NONCE,(null==me?void 0:me.type)===o.TransactionType.cancel?Ce=ge.CANCEL:(null==me?void 0:me.type)===o.TransactionType.retry&&(Ce=ge.RETRY));const fe=[];let ye=null;1===(null==F?void 0:F.flagAsDangerous)?fe.push(l.MetaMetricsEventUiCustomization.FlaggedAsMalicious):2===(null==F?void 0:F.flagAsDangerous)&&fe.push(l.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown);const ve=(0,m.getBlockaidMetricsProps)(e);(null==ve||null===(f=ve.ui_customizations)||void 0===f?void 0:f.length)>0&&fe.push(...ve.ui_customizations),U&&fe.push(l.MetaMetricsEventUiCustomization.GasEstimationFailed);(0,C.shouldUseRedesignForTransactions)({transactionMetadataType:e.type,isRedesignedConfirmationsDeveloperEnabled:t.getIsRedesignedConfirmationsDeveloperEnabled()})&&(fe.push(l.MetaMetricsEventUiCustomization.RedesignedConfirmation),ye=t.getIsConfirmationAdvancedDetailsOpen());const we=(0,h.getSmartTransactionMetricsProperties)(t,e),be=(0,m.getSwapAndSendMetricsProps)(e);let ke={chain_id:b,referrer:k,source:$,status:w,network:`${parseInt(b,16)}`,eip_1559_version:ne,gas_edit_type:"none",gas_edit_attempted:"none",gas_estimation_failed:Boolean(U),account_type:await t.getAccountType(t.getSelectedAddress()),device_model:await t.getDeviceModel(t.getSelectedAddress()),asset_type:q,token_standard:H,transaction_type:ue,transaction_speed_up:y===o.TransactionType.retry,transaction_internal_id:L,gas_fee_selected:K,...ve,ui_customizations:fe.length>0?fe:null,transaction_advanced_view:ye,transaction_contract_method:ae,...we,...be};const Se=await(0,g.getSnapAndHardwareInfoForMetrics)(t.getAccountType,t.getDeviceModel,t.snapAndHardwareMessenger);Object.assign(ke,Se),ae===se&&(ke={...ke,transaction_approval_amount_type:oe});let Ae={transaction_envelope_type:(0,p.isEIP1559Transaction)(e)?d.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET:d.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,first_seen:v,gas_limit:A,transaction_replaced:Ce,transaction_contract_address:ce,transaction_contract_method_4byte:de,...n,...te};return ae===se&&(Ae={...Ae,transaction_approval_amount_vs_balance_ratio:le,transaction_approval_amount_vs_proposed_ratio:ie}),{properties:ke,sensitiveProperties:Ae}}n.handlePostTransactionBalanceUpdate=async({getParticipateInMetrics:e,trackEvent:t},{transactionMeta:n,approvalTransactionMeta:s})=>{var o;if(e()&&n.swapMetaData)if("0x0"===(null===(o=n.txReceipt)||void 0===o?void 0:o.status))t({event:"Swap Failed",sensitiveProperties:{...n.swapMetaData},category:l.MetaMetricsEventCategory.Swaps});else{var a;const e=(0,d.getSwapsTokensReceivedFromTxMeta)(n.destinationTokenSymbol,n,n.destinationTokenAddress,n.txParams.from,n.destinationTokenDecimals,s,n.chainId),o=e?`${new r.BigNumber(e,10).div(n.swapMetaData.token_to_amount,10).times(100).round(2)}%`:null,i=null!==(a=n.txReceipt)&&void 0!==a&&a.gasUsed&&n.swapMetaData.estimated_gas?`${new r.BigNumber(n.txReceipt.gasUsed,16).div(n.swapMetaData.estimated_gas,10).times(100).round(2)}%`:null,c=function(e,t){var n,s;let o="0x0";null!=t&&t.txReceipt&&(o=(0,d.calcGasTotal)(t.txReceipt.gasUsed,t.txReceipt.effectiveGasPrice));const a=(0,d.calcGasTotal)(null===(n=e.txReceipt)||void 0===n?void 0:n.gasUsed,null===(s=e.txReceipt)||void 0===s?void 0:s.effectiveGasPrice),i=new r.BigNumber(a,16).plus(o,16).toString(16);return{approvalGasCostInEth:Number((0,u.hexWEIToDecETH)(o)),tradeGasCostInEth:Number((0,u.hexWEIToDecETH)(a)),tradeAndApprovalGasCostInEth:Number((0,u.hexWEIToDecETH)(i))}}(n,s);t({event:l.MetaMetricsEventName.SwapCompleted,category:l.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...n.swapMetaData,token_to_amount_received:e,quote_vs_executionRatio:o,estimated_vs_used_gasRatio:i,approval_gas_cost_in_eth:c.approvalGasCostInEth,trade_gas_cost_in_eth:c.tradeGasCostInEth,trade_and_approval_gas_cost_in_eth:c.tradeAndApprovalGasCostInEth,token_to_amount:n.swapMetaData.token_to_amount.toString(10)}})}}}}},{package:"$root$",file:"app/scripts/lib/transaction/metrics.ts"}],[132,{"../../../../shared/constants/app":5732,"../../../../shared/constants/smartTransactions":5756,"../../../../shared/modules/conversion.utils":5788,"@metamask/smart-transactions-controller/dist/types":2684,"@metamask/transaction-controller":3162,loglevel:4872},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.submitSmartTransactionHook=void 0;var r,s=e("@metamask/smart-transactions-controller/dist/types"),o=e("@metamask/transaction-controller"),a=(r=e("loglevel"))&&r.__esModule?r:{default:r},i=e("../../../../shared/modules/conversion.utils"),l=e("../../../../shared/constants/smartTransactions"),c=e("../../../../shared/constants/app");function d(e,t,n){u(e,t),t.set(e,n)}function u(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function h(e,t){return e.get(m(e,t))}function p(e,t,n){return e.set(m(e,t),n),n}function m(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}var g=new WeakMap,C=new WeakMap,f=new WeakMap,y=new WeakMap,v=new WeakMap,w=new WeakMap,b=new WeakMap,k=new WeakMap,S=new WeakMap,A=new WeakMap,T=new WeakMap,M=new WeakMap,E=new WeakMap,P=new WeakSet;class N{constructor(e){!function(e,t){u(e,t),t.add(e)}(this,P),d(this,g,void 0),d(this,C,void 0),d(this,f,void 0),d(this,y,void 0),d(this,v,void 0),d(this,w,void 0),d(this,b,void 0),d(this,k,void 0),d(this,S,void 0),d(this,A,void 0),d(this,T,void 0),d(this,M,void 0),d(this,E,void 0);const{transactionMeta:t,signedTransactionInHex:n,smartTransactionsController:r,transactionController:s,isSmartTransaction:a,controllerMessenger:i,featureFlags:l}=e;p(C,this,""),p(g,this,!1),p(A,this,t),p(T,this,n),p(k,this,r),p(S,this,s),p(b,this,a),p(y,this,i),p(v,this,l),p(w,this,t.origin!==c.ORIGIN_METAMASK),p(f,this,t.chainId),p(M,this,t.txParams),p(E,this,t.type!==o.TransactionType.bridge)}async submit(){var e;const t=!(null===(e=h(A,this))||void 0===e||!e.type)&&[o.TransactionType.swapAndSend,o.TransactionType.swapApproval,o.TransactionType.bridgeApproval].includes(h(A,this).type),n={transactionHash:undefined};if(!h(b,this)||t)return n;if(h(E,this)){const{id:e}=await h(y,this).call("ApprovalController:startFlow");p(C,this,e)}let r;try{r=await h(k,this).getFees({...h(M,this),chainId:h(f,this)},undefined)}catch(e){return a.default.error("Error in smart transaction publish hook, falling back to regular transaction submission",e),m(P,this,_).call(this),n}try{var s;const e=await m(P,this,D).call(this,{getFeesResponse:r}),t=null==e?void 0:e.uuid;if(!t)throw new Error("No smart transaction UUID");const n=null===(s=h(v,this))||void 0===s||null===(s=s.smartTransactions)||void 0===s?void 0:s.extensionReturnTxHashAsap;let o;if(h(E,this)&&(m(P,this,I).call(this,{uuid:t}),m(P,this,O).call(this,{uuid:t})),o=n&&null!=e&&e.txHash?e.txHash:await m(P,this,B).call(this,{uuid:t}),null===o)throw new Error("Transaction does not have a transaction hash, there was a problem");return{transactionHash:o}}catch(e){throw a.default.error("Error in smart transaction publish hook",e),m(P,this,_).call(this),e}}}function _(){h(E,this)&&!h(g,this)&&(p(g,this,!0),h(y,this).call("ApprovalController:endFlow",{id:h(C,this)}))}function I({uuid:e}){const t=()=>{m(P,this,_).call(this)};h(y,this).call("ApprovalController:addRequest",{id:h(C,this),origin:origin,type:c.SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage,requestState:{smartTransaction:{status:s.SmartTransactionStatuses.PENDING,creationTime:Date.now(),uuid:e},isDapp:h(w,this),txId:h(A,this).id}},!0).then(t,t)}async function R({smartTransaction:e}){return await h(y,this).call("ApprovalController:updateRequestState",{id:h(C,this),requestState:{smartTransaction:e,isDapp:h(w,this),txId:h(A,this).id}})}async function O({uuid:e}){h(y,this).subscribe("SmartTransactionsController:smartTransaction",(async t=>{if(t.uuid===e){const{status:e}=t;if(!e||e===s.SmartTransactionStatuses.PENDING)return;h(g,this)||await m(P,this,R).call(this,{smartTransaction:t})}}))}function B({uuid:e}){return new Promise((t=>{h(y,this).subscribe("SmartTransactionsController:smartTransaction",(async n=>{if(n.uuid===e){const{status:e,statusMetadata:r}=n;if(!e||e===s.SmartTransactionStatuses.PENDING)return;a.default.debug("Smart Transaction: ",n),null!=r&&r.minedHash?(a.default.debug("Smart Transaction - Received tx hash: ",null==r?void 0:r.minedHash),t(r.minedHash)):t(null)}}))}))}async function D({getFeesResponse:e}){let t;var n;h(T,this)?t=[h(T,this)]:t=await m(P,this,F).call(this,(null===(n=e.tradeTxFees)||void 0===n?void 0:n.fees)??[],!1);return await h(k,this).submitSignedTransactions({signedTransactions:t,signedCanceledTransactions:[],txParams:h(M,this),transactionMeta:h(A,this)})}function x(e,t){const n={...h(M,this),maxFeePerGas:`0x${(0,i.decimalToHex)(e.maxFeePerGas)}`,maxPriorityFeePerGas:`0x${(0,i.decimalToHex)(e.maxPriorityFeePerGas)}`,gas:t?`0x${(0,i.decimalToHex)(l.CANCEL_GAS_LIMIT_DEC)}`:h(M,this).gas};return t&&(n.to=n.from,n.data="0x"),n}async function F(e,t){const n=e.map((e=>m(P,this,x).call(this,e,t))).map((e=>({...e,chainId:e.chainId||h(f,this)})));return await h(S,this).approveTransactionsWithSameNonce(n,{hasNonce:!0})}n.submitSmartTransactionHook=e=>new N(e).submit()}}},{package:"$root$",file:"app/scripts/lib/transaction/smart-transactions.ts"}],[133,{"../../../../shared/constants/security-provider":5754,"../../../../shared/lib/trace":5775,"../ppom/ppom-util":95,"@metamask/keyring-api":2055,"ethereumjs-util":4282},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:n,method:r,origin:s}=t,{securityAlertResponse:o,traceContext:a}=t,c={actionId:n,method:r,origin:s,requireApproval:!0,securityAlertResponse:o};(0,i.endTrace)({name:i.TraceName.Middleware,id:n});const{waitForHash:d}=await l({...e,transactionOptions:{...c,traceContext:a}}),u=await d();return(0,i.endTrace)({name:i.TraceName.Transaction,id:n}),u},n.addTransaction=async function(e){await async function(e){const{chainId:t,ppomController:n,securityAlertsEnabled:r,transactionOptions:s,transactionParams:i,updateSecurityAlertResponse:l,internalAccounts:c}=e,{type:d}=s,u=a.SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES.includes(d);if(!r||u)return;if(c.some((({address:e})=>{var t;return e.toLowerCase()===(null===(t=i.to)||void 0===t?void 0:t.toLowerCase())})))return;try{const{from:r,to:c,value:d,data:u}=i,{actionId:h,origin:p}=s,m={method:"eth_sendTransaction",id:h??"",origin:p??"",params:[{from:r,to:c??"",value:d??"",data:u??""}],jsonrpc:"2.0"},g=(0,o.generateSecurityAlertId)();(0,o.validateRequestWithPPOM)({ppomController:n,request:m,securityAlertId:g,chainId:t,updateSecurityAlertResponse:l});const C={...a.SECURITY_ALERT_RESPONSE_CHECKING_CHAIN,securityAlertId:g};e.transactionOptions.securityAlertResponse=C}catch(e){(0,o.handlePPOMError)(e,"Error validating JSON RPC using PPOM: ")}}(e);const{transactionMeta:t,waitForHash:n}=await l(e);if(!e.waitForSubmit)return n().catch((()=>{})),t;const r=await n();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(r,e.transactionController)};var r=e("@metamask/keyring-api"),s=e("ethereumjs-util"),o=e("../ppom/ppom-util"),a=e("../../../../shared/constants/security-provider"),i=e("../../../../shared/lib/trace");async function l(e){const{selectedAccount:t}=e;return t.type===r.EthAccountType.Erc4337?async function(e){var t;const{networkClientId:n,transactionController:r,transactionOptions:o,transactionParams:a,userOperationController:i}=e,{maxFeePerGas:l,maxPriorityFeePerGas:d}=a,{origin:u,requireApproval:h,type:p}=o,m={...a,maxFeePerGas:(0,s.addHexPrefix)(l),maxPriorityFeePerGas:(0,s.addHexPrefix)(d)},g=null==o||null===(t=o.swaps)||void 0===t?void 0:t.meta;null!=g&&g.type&&delete g.type;const C={networkClientId:n,origin:u,requireApproval:h,swaps:g,type:p},f=await i.addUserOperationFromTransaction(m,C);i.startPollingByNetworkClientId(n);return{transactionMeta:c(f.id,r),waitForHash:f.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:n,transactionParams:r,networkClientId:s}=e,{result:o,transactionMeta:a}=await t.addTransaction(r,{...n,networkClientId:s});return{transactionMeta:a,waitForHash:()=>o}}(e)}function c(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[134,{"../../../../shared/constants/app":5732,"../../../../shared/constants/verification":5764,"../../../../shared/modules/selectors/networks":5807,"@ethersproject/hash":535,"@ethersproject/wallet":618,"@metamask/rpc-errors":2568,"@metamask/utils":3224},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createTxVerificationMiddleware=function(e,t=i.TRUSTED_SIGNERS){return function(n,d,u,h){if(n.method!==l.MESSAGE_TYPE.ETH_SEND_TRANSACTION||!Array.isArray(n.params)||!function(e){return(0,a.isObject)(e[0])&&"string"==typeof e[0].data&&"string"==typeof e[0].from&&"string"==typeof e[0].to&&"string"==typeof e[0].value&&(!(0,a.hasProperty)(e[0],"chainId")||"string"==typeof e[0].chainId&&e[0].chainId.startsWith("0x"))}(n.params))return u();const p=n.params[0],m="string"==typeof p.chainId?p.chainId.toLowerCase():(0,c.getCurrentChainId)({metamask:e.state}),g=(0,i.getExperience)(p.to.toLowerCase(),m);if(!g||!i.EXPERIENCES_TO_VERIFY.includes(g))return u();const C=`0x${p.data.slice(-i.TX_SIG_LEN)}`,f=(0,s.verifyMessage)(function(e){const t={to:(0,r.hashMessage)(e.to.toLowerCase()),from:(0,r.hashMessage)(e.from.toLowerCase()),data:(0,r.hashMessage)(e.data.toLowerCase().slice(0,e.data.length-i.TX_SIG_LEN)),value:(0,r.hashMessage)(e.value.toLowerCase())};return(0,r.hashMessage)(JSON.stringify(t))}(p),C);return f!==t[g]?h(o.rpcErrors.invalidParams("Invalid transaction signature.")):u()}};var r=e("@ethersproject/hash"),s=e("@ethersproject/wallet"),o=e("@metamask/rpc-errors"),a=e("@metamask/utils"),i=e("../../../../shared/constants/verification"),l=e("../../../../shared/constants/app"),c=e("../../../../shared/modules/selectors/networks")}}},{package:"$root$",file:"app/scripts/lib/tx-verification/tx-verification-middleware.ts"}],[1351,{"./utils.cjs":1353,"@metamask/base-controller":1397,"@metamask/eth-snap-keyring":1732,"@metamask/keyring-api":2055,"@metamask/keyring-controller":2082,"@metamask/utils":3224},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,o,a,i,l,c,d,u,h,p,m,g,C,f,y=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.AccountsController=n.EMPTY_ACCOUNT=void 0;const v=e("@metamask/base-controller"),w=e("@metamask/eth-snap-keyring"),b=e("@metamask/keyring-api"),k=e("@metamask/keyring-controller"),S=e("@metamask/utils"),A=e("./utils.cjs"),T="AccountsController",M={internalAccounts:{persist:!0,anonymous:!1}},E={internalAccounts:{accounts:{},selectedAccount:""}};n.EMPTY_ACCOUNT={id:"",address:"",options:{},methods:[],type:b.EthAccountType.Eoa,metadata:{name:"",keyring:{type:""},importTime:0}};class P extends v.BaseController{constructor({messenger:e,state:t}){super({messenger:e,name:T,metadata:M,state:{...E,...t}}),r.add(this),this.messagingSystem.subscribe("SnapController:stateChange",(e=>y(this,r,"m",l).call(this,e))),this.messagingSystem.subscribe("KeyringController:stateChange",(e=>y(this,r,"m",i).call(this,e))),y(this,r,"m",f).call(this)}getAccount(e){return this.state.internalAccounts.accounts[e]}listAccounts(){return Object.values(this.state.internalAccounts.accounts).filter((e=>(0,b.isEvmAccountType)(e.type)))}listMultichainAccounts(e){const t=Object.values(this.state.internalAccounts.accounts);if(!e)return t;if(!(0,S.isCaipChainId)(e))throw new Error(`Invalid CAIP-2 chain ID: ${String(e)}`);return t.filter((t=>y(this,r,"m",u).call(this,t,e)))}getAccountExpect(e){const t=this.getAccount(e);if(t===undefined)throw new Error(`Account Id "${e}" not found`);return t}getSelectedAccount(){if(""===this.state.internalAccounts.selectedAccount)return n.EMPTY_ACCOUNT;const e=this.getAccountExpect(this.state.internalAccounts.selectedAccount);if((0,b.isEvmAccountType)(e.type))return e;const t=this.listAccounts();if(!t.length)throw new Error("No EVM accounts");return y(this,r,"m",d).call(this,t)}getSelectedMultichainAccount(e){if(""===this.state.internalAccounts.selectedAccount)return n.EMPTY_ACCOUNT;if(!e)return this.getAccountExpect(this.state.internalAccounts.selectedAccount);if(!(0,S.isCaipChainId)(e))throw new Error(`Invalid CAIP-2 chain ID: ${e}`);const t=Object.values(this.state.internalAccounts.accounts).filter((t=>y(this,r,"m",u).call(this,t,e)));return y(this,r,"m",d).call(this,t)}getAccountByAddress(e){return this.listMultichainAccounts().find((t=>t.address.toLowerCase()===e.toLowerCase()))}setSelectedAccount(e){const t=this.getAccountExpect(e);this.update((e=>{e.internalAccounts.accounts[t.id].metadata.lastSelected=Date.now(),e.internalAccounts.selectedAccount=t.id})),y(this,r,"m",m).call(this,t)}setAccountName(e,t){this.updateAccountMetadata(e,{name:t,nameLastUpdatedAt:Date.now()})}updateAccountMetadata(e,t){const n=this.getAccountExpect(e);if(t.name&&this.listMultichainAccounts().find((n=>n.metadata.name===t.name&&n.id!==e)))throw new Error("Account name already exists");this.update((r=>{const s={...n,metadata:{...n.metadata,...t}};r.internalAccounts.accounts[e]=s,t.name&&this.messagingSystem.publish("AccountsController:accountRenamed",s)}))}async updateAccounts(){const e=await y(this,r,"m",o).call(this),t=await y(this,r,"m",a).call(this),n=new Map,s=this.state.internalAccounts.accounts,i=[...t,...e].reduce(((e,t)=>{const o=(0,A.keyringTypeToName)(t.metadata.keyring.type),a=n.get(o)??0;a?n.set(o,a+1):n.set(o,1);const i=s[t.id];return e[t.id]={...t,metadata:{...t.metadata,name:y(this,r,"m",C).call(this,i?.id,"name")??`${o} ${a+1}`,importTime:y(this,r,"m",C).call(this,i?.id,"importTime")??Date.now(),lastSelected:y(this,r,"m",C).call(this,i?.id,"lastSelected")??0}},e}),{});this.update((e=>{if(e.internalAccounts.accounts=i,!e.internalAccounts.accounts[e.internalAccounts.selectedAccount]){const t=y(this,r,"m",d).call(this,Object.values(i));t?(e.internalAccounts.selectedAccount=t.id,e.internalAccounts.accounts[t.id].metadata.lastSelected=y(this,r,"m",h).call(this),y(this,r,"m",m).call(this,t)):e.internalAccounts.selectedAccount=""}}))}loadBackup(e){e.internalAccounts&&this.update((t=>{t.internalAccounts=e.internalAccounts}))}getNextAvailableAccountName(e=k.KeyringTypes.hd,t){const n=(0,A.keyringTypeToName)(e),s=y(this,r,"m",c).call(this,e,t),o=s.reduce(((e,t)=>{const r=new RegExp(`${n} ([0-9]+)$`,"u").exec(t.metadata.name);if(r){const t=parseInt(r[1],10);return Math.max(e,t)}return e}),0),a=Math.max(s.length+1,o+1);return`${n} ${a}`}}n.AccountsController=P,r=new WeakSet,s=function(e,t){return{id:(0,A.getUUIDFromAddressOfNormalAccount)(e),address:e,options:{},methods:[b.EthMethod.PersonalSign,b.EthMethod.Sign,b.EthMethod.SignTransaction,b.EthMethod.SignTypedDataV1,b.EthMethod.SignTypedDataV3,b.EthMethod.SignTypedDataV4],type:b.EthAccountType.Eoa,metadata:{name:"",importTime:Date.now(),keyring:{type:t}}}},o=async function(){const[e]=this.messagingSystem.call("KeyringController:getKeyringsByType",w.SnapKeyring.type);if(!e)return[];return e.listAccounts()},a=async function(){const e=await this.messagingSystem.call("KeyringController:getAccounts"),t=[];for(const n of e){const e=await this.messagingSystem.call("KeyringController:getKeyringForAccount",n),s=e.type;if(!(0,A.isNormalKeyringType)(s))continue;const o=(0,A.getUUIDFromAddressOfNormalAccount)(n),a=y(this,r,"m",C).call(this,o,"nameLastUpdatedAt");t.push({id:o,address:n,options:{},methods:[b.EthMethod.PersonalSign,b.EthMethod.Sign,b.EthMethod.SignTransaction,b.EthMethod.SignTypedDataV1,b.EthMethod.SignTypedDataV3,b.EthMethod.SignTypedDataV4],type:b.EthAccountType.Eoa,metadata:{name:y(this,r,"m",C).call(this,o,"name")??"",...a&&{nameLastUpdatedAt:a},importTime:y(this,r,"m",C).call(this,o,"importTime")??Date.now(),lastSelected:y(this,r,"m",C).call(this,o,"lastSelected")??0,keyring:{type:e.type}}})}return t},i=function(e){if(e.isUnlocked&&e.keyrings.length>0){const t=[],n=[];for(const r of e.keyrings)r.type===k.KeyringTypes.snap?n.push(...r.accounts.map((e=>({address:e,type:r.type})))):t.push(...r.accounts.map((e=>({address:e,type:r.type}))));const{previousNormalInternalAccounts:s,previousSnapInternalAccounts:o}=this.listMultichainAccounts().reduce(((e,t)=>(t.metadata.keyring.type===k.KeyringTypes.snap?e.previousSnapInternalAccounts.push(t):e.previousNormalInternalAccounts.push(t),e)),{previousNormalInternalAccounts:[],previousSnapInternalAccounts:[]}),a=[],i=[];for(const e of t)this.state.internalAccounts.accounts[(0,A.getUUIDFromAddressOfNormalAccount)(e.address)]||a.push(e);for(const e of n)o.find((t=>t.address.toLowerCase()===e.address.toLowerCase()))||a.push(e);for(const e of s)t.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||i.push(e);for(const e of o)n.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||i.push(e);this.update((e=>{if(i.length>0)for(const t of i)e.internalAccounts.accounts=y(this,r,"m",g).call(this,e.internalAccounts.accounts,t.id);if(a.length>0)for(const t of a)e.internalAccounts.accounts=y(this,r,"m",p).call(this,e.internalAccounts.accounts,t);const t=Object.values(e.internalAccounts.accounts);if(!e.internalAccounts.accounts[this.state.internalAccounts.selectedAccount]){const n=y(this,r,"m",d).call(this,t);n?(e.internalAccounts.selectedAccount=n.id,e.internalAccounts.accounts[n.id].metadata.lastSelected=y(this,r,"m",h).call(this),y(this,r,"m",m).call(this,n)):e.internalAccounts.selectedAccount=""}}))}},l=function(e){const{snaps:t}=e,n=this.listMultichainAccounts().filter((e=>e.metadata.snap));this.update((e=>{n.forEach((n=>{const r=e.internalAccounts.accounts[n.id];if(r.metadata.snap){const e=r.metadata.snap.id,n=t[e];n&&(r.metadata.snap.enabled=n.enabled&&!n.blocked)}}))}))},c=function(e,t){return(t??this.listMultichainAccounts()).filter((t=>e===k.KeyringTypes.hd||e===k.KeyringTypes.simple?t.metadata.keyring.type===k.KeyringTypes.hd||t.metadata.keyring.type===k.KeyringTypes.simple:t.metadata.keyring.type===e))},d=function(e){const[t]=e.sort(((e,t)=>(t.metadata.lastSelected??0)-(e.metadata.lastSelected??0)));return t},u=function(e,t){return e.type.startsWith((0,S.parseCaipChainId)(t).namespace)},h=function(){return Date.now()},p=function(e,t){let n;if(t.type!==k.KeyringTypes.snap)n=y(this,r,"m",s).call(this,t.address,t.type);else{const[r]=this.messagingSystem.call("KeyringController:getKeyringsByType",w.SnapKeyring.type);if(n=r.getAccountByAddress(t.address),!n)return e}const o=0===Object.keys(e).length,a=this.getNextAvailableAccountName(n.metadata.keyring.type,Object.values(e)),i={...n,metadata:{...n.metadata,name:a,importTime:Date.now(),lastSelected:o?y(this,r,"m",h).call(this):0}};return e[n.id]=i,this.messagingSystem.publish("AccountsController:accountAdded",i),e},m=function(e){(0,b.isEvmAccountType)(e.type)&&this.messagingSystem.publish("AccountsController:selectedEvmAccountChange",e),this.messagingSystem.publish("AccountsController:selectedAccountChange",e)},g=function(e,t){return delete e[t],this.messagingSystem.publish("AccountsController:accountRemoved",t),e},C=function(e,t,n){const r=n??this.getAccount(e);return r?r.metadata[t]:undefined},f=function(){this.messagingSystem.registerActionHandler(`${T}:setSelectedAccount`,this.setSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:listAccounts`,this.listAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:listMultichainAccounts`,this.listMultichainAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:setAccountName`,this.setAccountName.bind(this)),this.messagingSystem.registerActionHandler(`${T}:updateAccounts`,this.updateAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getSelectedAccount`,this.getSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getSelectedMultichainAccount`,this.getSelectedMultichainAccount.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getAccountByAddress`,this.getAccountByAddress.bind(this)),this.messagingSystem.registerActionHandler(`${T}:getNextAvailableAccountName`,this.getNextAvailableAccountName.bind(this)),this.messagingSystem.registerActionHandler("AccountsController:getAccount",this.getAccount.bind(this)),this.messagingSystem.registerActionHandler("AccountsController:updateAccountMetadata",this.updateAccountMetadata.bind(this))}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/AccountsController.cjs"}],[1352,{"./AccountsController.cjs":1351,"./utils.cjs":1353},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getUUIDFromAddressOfNormalAccount=n.keyringTypeToName=n.AccountsController=void 0;var r=e("./AccountsController.cjs");Object.defineProperty(n,"AccountsController",{enumerable:!0,get:function(){return r.AccountsController}});var s=e("./utils.cjs");Object.defineProperty(n,"keyringTypeToName",{enumerable:!0,get:function(){return s.keyringTypeToName}}),Object.defineProperty(n,"getUUIDFromAddressOfNormalAccount",{enumerable:!0,get:function(){return s.getUUIDFromAddressOfNormalAccount}})}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/index.cjs"}],[1353,{"@ethereumjs/util":484,"@metamask/keyring-controller":2082,"ethereum-cryptography/sha256":4273,uuid:5660},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isNormalKeyringType=n.getUUIDFromAddressOfNormalAccount=n.getUUIDOptionsFromAddressOfNormalAccount=n.keyringTypeToName=void 0;const r=e("@ethereumjs/util"),s=e("@metamask/keyring-controller"),o=e("ethereum-cryptography/sha256"),a=e("uuid");function i(e){return{random:(0,o.sha256)((0,r.toBuffer)(e)).slice(0,16)}}n.keyringTypeToName=function(e){if((0,s.isCustodyKeyring)(e))return"Custody";switch(e){case s.KeyringTypes.simple:case s.KeyringTypes.hd:return"Account";case s.KeyringTypes.trezor:return"Trezor";case s.KeyringTypes.ledger:return"Ledger";case s.KeyringTypes.lattice:return"Lattice";case s.KeyringTypes.qr:return"QR";case s.KeyringTypes.snap:return"Snap Account";default:throw new Error(`Unknown keyring ${e}`)}},n.getUUIDOptionsFromAddressOfNormalAccount=i,n.getUUIDFromAddressOfNormalAccount=function(e){return(0,a.v4)(i(e))},n.isNormalKeyringType=function(e){return e!==s.KeyringTypes.snap}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/utils.cjs"}],[1354,{"@metamask/base-controller":1397,"@metamask/controller-utils":1423},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("@metamask/base-controller"),s=e("@metamask/controller-utils"),o=(e=>(e.externallyOwnedAccounts="EXTERNALLY_OWNED_ACCOUNTS",e.contractAccounts="CONTRACT_ACCOUNTS",e.nonAccounts="NON_ACCOUNTS",e))(o||{}),a="AddressBookController",i={addressBook:{persist:!0,anonymous:!1}},l=()=>({addressBook:{}}),c=class extends r.BaseController{constructor({messenger:e,state:t}){const n={addressBook:{},...t};super({messenger:e,metadata:i,name:a,state:n})}clear(){this.update((e=>{e.addressBook={}}))}delete(e,t){return t=s.toChecksumHexAddress.call(void 0,t),!!([e,t].every((e=>s.isSafeDynamicKey.call(void 0,e)))&&s.isValidHexAddress.call(void 0,t)&&this.state.addressBook[e]&&this.state.addressBook[e][t])&&(this.update((n=>{delete n.addressBook[e][t],0===Object.keys(n.addressBook[e]).length&&delete n.addressBook[e]})),!0)}set(e,t,n=s.toHex.call(void 0,1),r="",o){if(e=s.toChecksumHexAddress.call(void 0,e),!s.isValidHexAddress.call(void 0,e))return!1;const a={address:e,chainId:n,isEns:!1,memo:r,name:t,addressType:o},i=s.normalizeEnsName.call(void 0,t);return i&&(a.name=i,a.isEns=!0),this.update((t=>{t.addressBook={...this.state.addressBook,[n]:{...this.state.addressBook[n],[e]:a}}})),!0}},d=c;n.AddressType=o,n.controllerName=a,n.getDefaultAddressBookControllerState=l,n.AddressBookController=c,n.AddressBookController_default=d}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/chunk-QIOW2RCR.js"}],[1355,{"./chunk-QIOW2RCR.js":1354},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-QIOW2RCR.js");n.AddressBookController=r.AddressBookController,n.getDefaultAddressBookControllerState=r.getDefaultAddressBookControllerState}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/index.js"}],[1356,{"@metamask/base-controller":1363},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o=(e,t,n)=>(((e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)})(e,t,"access private method"),n),a=e("@metamask/base-controller"),i={announcements:{}},l={announcements:{persist:!0,anonymous:!0}},c=class extends a.BaseController{constructor({messenger:e,state:t,allAnnouncements:n}){const a={...i,...t};super({messenger:e,metadata:l,name:"AnnouncementController",state:a}),((e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)})(this,r),o(this,r,s).call(this,n)}resetViewed(){this.update((({announcements:e})=>{for(const t of Object.values(e))t.isShown=!1}))}updateViewed(e){this.update((({announcements:t})=>{for(const n of Object.keys(e).map(Number))t[n].isShown=e[n]}))}};r=new WeakSet,s=function(e){this.update((t=>{Object.values(e).forEach((e=>{t.announcements[e.id]=t.announcements[e.id]??{...e,isShown:!1}}))}))},n.AnnouncementController=c}}},{package:"@metamask/announcement-controller",file:"node_modules/@metamask/announcement-controller/dist/chunk-ZGM3XNIO.js"}],[1357,{"./chunk-ZGM3XNIO.js":1356},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-ZGM3XNIO.js");n.AnnouncementController=r.AnnouncementController}}},{package:"@metamask/announcement-controller",file:"node_modules/@metamask/announcement-controller/dist/index.js"}],[1358,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=class{constructor(e={},t={}){this.defaultConfig={},this.defaultState={},this.disabled=!1,this.name="BaseController",this.internalConfig=this.defaultConfig,this.internalState=this.defaultState,this.internalListeners=[],this.initialState=t,this.initialConfig=e}initialize(){return this.internalState=this.defaultState,this.internalConfig=this.defaultConfig,this.configure(this.initialConfig),this.update(this.initialState),this}get config(){return this.internalConfig}get state(){return this.internalState}configure(e,t=!1,n=!0){if(n){this.internalConfig=t?e:Object.assign(this.internalConfig,e);for(const e of Object.keys(this.internalConfig)){const t=this.internalConfig[e];void 0!==t&&(this[e]=t)}}else for(const t of Object.keys(e))if(void 0!==this.internalConfig[t]){const n=e[t];this.internalConfig[t]=n,this[t]=n}}notify(){this.disabled||this.internalListeners.forEach((e=>{e(this.internalState)}))}subscribe(e){this.internalListeners.push(e)}unsubscribe(e){const t=this.internalListeners.findIndex((t=>e===t));return t>-1&&this.internalListeners.splice(t,1),t>-1}update(e,t=!1){this.internalState=t?Object.assign({},e):Object.assign({},this.internalState,e),this.notify()}},s=r;n.BaseControllerV1=r,n.BaseControllerV1_default=s}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js"}],[1359,{"./chunk-UJFCPTF3.js":1361,"./chunk-Z4BLTVTB.js":1362},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o,a,i=e("./chunk-UJFCPTF3.js"),l=e("./chunk-Z4BLTVTB.js");r=new WeakMap,s=new WeakMap,o=new WeakMap,a=new WeakMap,n.ControllerMessenger=class{constructor(){l.__privateAdd.call(void 0,this,r,new Map),l.__privateAdd.call(void 0,this,s,new Map),l.__privateAdd.call(void 0,this,o,new Map),l.__privateAdd.call(void 0,this,a,new Map)}registerActionHandler(e,t){if(l.__privateGet.call(void 0,this,r).has(e))throw new Error(`A handler for ${e} has already been registered`);l.__privateGet.call(void 0,this,r).set(e,t)}unregisterActionHandler(e){l.__privateGet.call(void 0,this,r).delete(e)}clearActions(){l.__privateGet.call(void 0,this,r).clear()}call(e,...t){const n=l.__privateGet.call(void 0,this,r).get(e);if(!n)throw new Error(`A handler for ${e} has not been registered`);return n(...t)}registerInitialEventPayload({eventType:e,getPayload:t}){l.__privateGet.call(void 0,this,o).set(e,t)}publish(e,...t){const n=l.__privateGet.call(void 0,this,s).get(e);if(n)for(const[e,r]of n.entries())try{if(r){const n=l.__privateGet.call(void 0,this,a).get(e),s=r(...t);s!==n&&(l.__privateGet.call(void 0,this,a).set(e,s),e(s,n))}else e(...t)}catch(e){setTimeout((()=>{throw e}))}}subscribe(e,t,n){let r=l.__privateGet.call(void 0,this,s).get(e);if(r||(r=new Map,l.__privateGet.call(void 0,this,s).set(e,r)),r.set(t,n),n){const r=l.__privateGet.call(void 0,this,o).get(e);if(r){const e=n(...r());l.__privateGet.call(void 0,this,a).set(t,e)}}}unsubscribe(e,t){const n=l.__privateGet.call(void 0,this,s).get(e);if(!n||!n.has(t))throw new Error(`Subscription not found for event: ${e}`);n.get(t)&&l.__privateGet.call(void 0,this,a).delete(t),n.delete(t)}clearEventSubscriptions(e){l.__privateGet.call(void 0,this,s).delete(e)}clearSubscriptions(){l.__privateGet.call(void 0,this,s).clear()}getRestricted({name:e,allowedActions:t,allowedEvents:n}){return new(0,i.RestrictedControllerMessenger)({controllerMessenger:this,name:e,allowedActions:t,allowedEvents:n})}}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js"}],[136,{"../../development/build/constants":303,"../../shared/constants/app":5732,"../../shared/constants/hardware-wallets":5740,"../../shared/constants/keyring":5741,"../../shared/constants/logs":5743,"../../shared/constants/metametrics":5744,"../../shared/constants/methods-tags":5745,"../../shared/constants/network":5748,"../../shared/constants/permissions":5752,"../../shared/constants/smartTransactions":5756,"../../shared/constants/swaps":5758,"../../shared/constants/time":5760,"../../shared/constants/tokens":5761,"../../shared/constants/transaction":5762,"../../shared/constants/urls":5763,"../../shared/lib/fetch-with-cache":5767,"../../shared/lib/metamask-controller-utils":5769,"../../shared/lib/storage-helpers":5771,"../../shared/lib/token-util":5774,"../../shared/lib/trace":5775,"../../shared/lib/transactions-controller-utils":5776,"../../shared/modules/caip-stream":5786,"../../shared/modules/mv3.utils":5797,"../../shared/modules/network.utils":5798,"../../shared/modules/selectors":5806,"../../shared/modules/selectors/networks":5807,"../../shared/modules/string-utils":5811,"../../shared/modules/transaction.utils":5813,"../../shared/notifications":5815,"../../shared/types/bridge":5817,"../../shared/types/bridge-status":5816,"./constants/stream":8,"./controllers/account-order":9,"./controllers/account-tracker-controller":10,"./controllers/alert-controller":11,"./controllers/app-metadata":12,"./controllers/app-state-controller":13,"./controllers/bridge-status/bridge-status-controller":14,"./controllers/bridge-status/constants":15,"./controllers/bridge/bridge-controller":18,"./controllers/bridge/constants":19,"./controllers/decrypt-message":20,"./controllers/encryption-public-key":21,"./controllers/metametrics-controller":22,"./controllers/metametrics-data-deletion/metametrics-data-deletion":23,"./controllers/network-order":24,"./controllers/onboarding":25,"./controllers/permissions":29,"./controllers/preferences-controller":32,"./controllers/push-notifications":35,"./controllers/swaps":36,"./detect-multiple-instances":39,"./lib/AccountIdentitiesPetnamesBridge":50,"./lib/AddressBookPetnamesBridge":51,"./lib/ComposableObservableStore":52,"./lib/PatchStore":53,"./lib/SnapsNameProvider":54,"./lib/WeakRefObjectMap":55,"./lib/accounts/BalancesController":56,"./lib/approval/utils":59,"./lib/backup":60,"./lib/createDupeReqFilterStream":61,"./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware":62,"./lib/createLoggerMiddleware":63,"./lib/createMainFrameOriginMiddleware":64,"./lib/createMetaRPCHandler":65,"./lib/createMetamaskMiddleware":66,"./lib/createOnboardingMiddleware":67,"./lib/createOriginMiddleware":68,"./lib/createRPCMethodTrackingMiddleware":69,"./lib/createTabIdMiddleware":71,"./lib/createTracingMiddleware":72,"./lib/encryptor-factory":73,"./lib/hardware-keyring-builder-factory":81,"./lib/multichain/address":87,"./lib/offscreen-bridge/lattice-offscreen-keyring":90,"./lib/offscreen-bridge/ledger-offscreen-bridge":91,"./lib/offscreen-bridge/trezor-offscreen-bridge":92,"./lib/ppom/indexed-db-backend":93,"./lib/ppom/ppom":96,"./lib/ppom/ppom-middleware":94,"./lib/ppom/ppom-util":95,"./lib/rpc-method-middleware":110,"./lib/segment":112,"./lib/signature/util":116,"./lib/snap-keyring":117,"./lib/snap-keyring/keyring-snaps-permissions":118,"./lib/state-utils":123,"./lib/stream-utils":124,"./lib/transaction/decode/util":130,"./lib/transaction/metrics":131,"./lib/transaction/smart-transactions":132,"./lib/transaction/util":133,"./lib/tx-verification/tx-verification-middleware":134,"./lib/util":135,"./services/data-deletion-service":298,"./snaps/preinstalled-snaps":299,"./translate":300,"@ethersproject/abi":506,"@keystonehq/metamask-airgapped-keyring":674,"@metamask/accounts-controller":1352,"@metamask/address-book-controller":1355,"@metamask/announcement-controller":1357,"@metamask/approval-controller":1366,"@metamask/assets-controllers":1386,"@metamask/base-controller":1397,"@metamask/controller-utils":1423,"@metamask/ens-controller":1472,"@metamask/eth-json-rpc-filters":1527,"@metamask/eth-json-rpc-filters/subscriptionManager":1529,"@metamask/eth-json-rpc-middleware":1562,"@metamask/eth-ledger-bridge-keyring":1623,"@metamask/eth-trezor-keyring":1870,"@metamask/gas-fee-controller":1940,"@metamask/json-rpc-engine":1949,"@metamask/json-rpc-middleware-stream":1974,"@metamask/keyring-api":2055,"@metamask/keyring-controller":2082,"@metamask/logging-controller":2182,"@metamask/metamask-eth-abis":2197,"@metamask/name-controller":2208,"@metamask/network-controller":2240,"@metamask/notification-services-controller":2297,"@metamask/obs-store":2308,"@metamask/obs-store/dist/asStream":2307,"@metamask/permission-controller":2315,"@metamask/permission-log-controller":2345,"@metamask/phishing-controller":2369,"@metamask/ppom-validator":2404,"@metamask/profile-sync-controller":2436,"@metamask/queued-request-controller":2503,"@metamask/rate-limit-controller":2505,"@metamask/remote-feature-flag-controller":2561,"@metamask/rpc-errors":2568,"@metamask/scure-bip39/dist/wordlists/english":2593,"@metamask/selected-network-controller":2605,"@metamask/signature-controller":2607,"@metamask/smart-transactions-controller":2683,"@metamask/smart-transactions-controller/dist/types":2684,"@metamask/snaps-controllers":2740,"@metamask/snaps-rpc-methods":2865,"@metamask/snaps-utils":3089,"@metamask/transaction-controller":3162,"@metamask/user-operation-controller":3206,"@sentry/browser":3351,"await-semaphore":3930,buffer:4037,"eth-chainlist":4230,"eth-lattice-keyring":4235,events:4354,lodash:4866,loglevel:4872,nanoid:4959,"readable-stream":5276},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.ONE_KEY_VIA_TREZOR_MINOR_VERSION=n.METAMASK_CONTROLLER_EVENTS=void 0;var r=Yt(e("events")),s=e("readable-stream"),o=e("@metamask/assets-controllers"),a=e("@metamask/json-rpc-engine"),i=e("@metamask/json-rpc-middleware-stream"),l=e("@metamask/obs-store"),c=e("@metamask/obs-store/dist/asStream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),h=e("@metamask/keyring-controller"),p=Yt(e("@metamask/eth-json-rpc-filters")),m=Yt(e("@metamask/eth-json-rpc-filters/subscriptionManager")),g=e("@metamask/rpc-errors"),C=e("await-semaphore"),f=Yt(e("loglevel")),y=e("@metamask/eth-trezor-keyring"),v=e("@metamask/eth-ledger-bridge-keyring"),w=Yt(e("eth-lattice-keyring")),b=e("eth-chainlist"),k=e("@keystonehq/metamask-airgapped-keyring"),S=e("nanoid"),A=e("@sentry/browser"),T=e("@metamask/address-book-controller"),M=e("@metamask/approval-controller"),E=e("@metamask/base-controller"),P=e("@metamask/ens-controller"),N=e("@metamask/phishing-controller"),_=e("@metamask/announcement-controller"),I=e("@metamask/network-controller"),R=e("@metamask/gas-fee-controller"),O=e("@metamask/permission-controller"),B=Yt(e("@metamask/smart-transactions-controller")),D=e("@metamask/smart-transactions-controller/dist/types"),x=e("@metamask/selected-network-controller"),F=e("@metamask/logging-controller"),U=e("@metamask/permission-log-controller"),L=e("@metamask/rate-limit-controller"),j=e("@metamask/snaps-controllers"),$=e("@metamask/snaps-rpc-methods"),K=e("@metamask/controller-utils"),q=e("@metamask/accounts-controller"),H=e("@metamask/remote-feature-flag-controller"),G=e("@metamask/signature-controller"),W=e("@metamask/ppom-validator"),V=e("@metamask/scure-bip39/dist/wordlists/english"),z=e("@metamask/name-controller"),Y=e("@metamask/queued-request-controller"),Q=e("@metamask/user-operation-controller"),J=e("@metamask/transaction-controller"),X=e("@metamask/snaps-utils"),Z=e("@ethersproject/abi"),ee=e("@metamask/metamask-eth-abis"),te=e("@metamask/keyring-api"),ne=e("@metamask/profile-sync-controller"),re=e("@metamask/notification-services-controller"),se=e("../../shared/constants/methods-tags"),oe=e("../../shared/constants/transaction"),ae=e("../../shared/constants/swaps"),ie=e("../../shared/constants/network"),le=e("../../shared/constants/smartTransactions"),ce=e("../../shared/constants/hardware-wallets"),de=e("../../shared/constants/keyring"),ue=e("../../shared/constants/permissions"),he=e("../../shared/notifications"),pe=e("../../shared/constants/time"),me=e("../../shared/constants/app"),ge=e("../../shared/constants/metametrics"),Ce=e("../../shared/constants/logs"),fe=e("../../shared/lib/storage-helpers"),ye=e("../../shared/lib/token-util"),ve=e("../../shared/modules/string-utils"),we=e("../../shared/modules/transaction.utils"),be=e("../../shared/constants/tokens"),ke=e("../../shared/lib/metamask-controller-utils"),Se=e("../../shared/modules/mv3.utils"),Ae=e("../../shared/modules/network.utils"),Te=e("../../shared/modules/selectors"),Me=e("../../shared/modules/caip-stream"),Ee=e("../../shared/constants/urls"),Pe=e("../../shared/lib/transactions-controller-utils"),Ne=e("../../shared/modules/selectors/networks"),_e=e("../../shared/lib/trace"),Ie=e("../../shared/types/bridge-status"),Re=e("../../development/build/constants"),Oe=Yt(e("../../shared/lib/fetch-with-cache")),Be=e("../../shared/types/bridge"),De=e("./lib/accounts/BalancesController"),xe=e("./lib/transaction/metrics"),Fe=e("./lib/transaction/smart-transactions"),Ue=e("./lib/snap-keyring/keyring-snaps-permissions"),Le=e("./lib/SnapsNameProvider"),je=e("./lib/AddressBookPetnamesBridge"),$e=e("./lib/AccountIdentitiesPetnamesBridge"),Ke=e("./lib/ppom/ppom-middleware"),qe=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=zt(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&{}.hasOwnProperty.call(e,o)){var a=s?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(e("./lib/ppom/ppom")),He=e("./detect-multiple-instances"),Ge=Yt(e("./lib/ComposableObservableStore")),We=Yt(e("./controllers/account-tracker-controller")),Ve=Yt(e("./lib/createDupeReqFilterStream")),ze=Yt(e("./lib/createLoggerMiddleware")),Ye=e("./lib/rpc-method-middleware"),Qe=Yt(e("./lib/createOriginMiddleware")),Je=Yt(e("./lib/createMainFrameOriginMiddleware")),Xe=Yt(e("./lib/createTabIdMiddleware")),Ze=e("./controllers/network-order"),et=e("./controllers/account-order"),tt=Yt(e("./lib/createOnboardingMiddleware")),nt=e("./lib/stream-utils"),rt=e("./controllers/preferences-controller"),st=e("./controllers/app-state-controller"),ot=e("./controllers/alert-controller"),at=Yt(e("./controllers/onboarding")),it=Yt(e("./lib/backup")),lt=Yt(e("./controllers/decrypt-message")),ct=Yt(e("./controllers/swaps")),dt=Yt(e("./controllers/metametrics-controller")),ut=e("./lib/segment"),ht=Yt(e("./lib/createMetaRPCHandler")),pt=e("./lib/util"),mt=Yt(e("./lib/createMetamaskMiddleware")),gt=e("./lib/hardware-keyring-builder-factory"),Ct=Yt(e("./controllers/encryption-public-key")),ft=Yt(e("./controllers/app-metadata")),yt=e("./controllers/permissions"),vt=e("./controllers/metametrics-data-deletion/metametrics-data-deletion"),wt=e("./services/data-deletion-service"),bt=Yt(e("./lib/createRPCMethodTrackingMiddleware")),kt=e("./lib/ppom/indexed-db-backend"),St=e("./translate"),At=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),Tt=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),Mt=e("./lib/snap-keyring"),Et=e("./lib/encryptor-factory"),Pt=e("./lib/transaction/util"),Nt=e("./lib/signature/util"),_t=e("./lib/offscreen-bridge/lattice-offscreen-keyring"),It=Yt(e("./snaps/preinstalled-snaps")),Rt=e("./lib/WeakRefObjectMap"),Ot=e("./constants/stream"),Bt=e("./lib/tx-verification/tx-verification-middleware"),Dt=e("./lib/ppom/ppom-util"),xt=Yt(e("./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware")),Ft=e("./lib/multichain/address"),Ut=e("./lib/transaction/decode/util"),Lt=Yt(e("./controllers/bridge/bridge-controller")),jt=e("./controllers/bridge/constants"),$t=e("./controllers/push-notifications"),Kt=Yt(e("./lib/createTracingMiddleware")),qt=e("./lib/PatchStore"),Ht=e("./lib/state-utils"),Gt=Yt(e("./controllers/bridge-status/bridge-status-controller")),Wt=e("./controllers/bridge-status/constants"),Vt=e("./lib/approval/utils");function zt(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(zt=function(e){return e?n:t})(e)}function Yt(e){return e&&e.__esModule?e:{default:e}}function Qt(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function Jt(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Xt(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const{TRIGGER_TYPES:Zt}=re.NotificationServicesController.Constants,en=(n.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange",APP_STATE_UNLOCK_CHANGE:"AppStateController:unlockChange",QUEUED_REQUEST_STATE_CHANGE:"QueuedRequestController:stateChange",METAMASK_NOTIFICATIONS_LIST_UPDATED:"NotificationServicesController:notificationsListUpdated",METAMASK_NOTIFICATIONS_MARK_AS_READ:"NotificationServicesController:markNotificationsAsRead"},n.ONE_KEY_VIA_TREZOR_MINOR_VERSION=99),tn={[Re.ENVIRONMENT.DEVELOPMENT]:H.EnvironmentType.Development,[Re.ENVIRONMENT.RELEASE_CANDIDATE]:H.EnvironmentType.ReleaseCandidate,[Re.ENVIRONMENT.PRODUCTION]:H.EnvironmentType.Production},nn={flask:H.DistributionType.Flask,main:H.DistributionType.Main};var rn=new WeakSet;class sn extends r.default{constructor(e){var t;super(),Qt(this,rn),Jt(this,"_trackSnapExportUsage",(0,u.wrap)((0,u.memoize)((()=>(0,u.throttle)(((e,t,n,r)=>{var s;return this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.SnapExportUsed,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category,success:n,origin:r}})}),60*pe.SECOND)),((e,t,n,r)=>`${e}${t}${r}`)),((e,...t)=>e(...t)(...t)))),Jt(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:n,networkClientId:r})=>{switch(t){case K.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:r});case K.ERC721:case K.ERC1155:return this.nftController.watchNft(e,t,n);default:throw new Error(`Asset type ${t} not supported`)}})),Jt(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Jt(this,"updateCaveat",((e,t,n,r)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,n,r)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Jt(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw f.default.error(e.message),e}})),Jt(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw f.default.error(e.message),e}})),Jt(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw f.default.error(e.message),e}})),Jt(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Jt(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof O.PermissionsRequestNotFoundError))throw e}})),Jt(this,"resolvePendingApproval",(async(e,t,n)=>{try{await this.approvalController.accept(e,t,n)}catch(e){if(!(e instanceof M.ApprovalRequestNotFoundError))throw e}})),Jt(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new g.JsonRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof M.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*pe.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const r=e.initState||{},s="12.11.0";this.recordFirstTimeInfo(r),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.offscreenPromise=e.offscreenPromise??Promise.resolve(),this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.initializeChainlist(),this.controllerMessenger=new E.ControllerMessenger,this.loggingController=new F.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController",allowedActions:[],allowedEvents:[]}),state:r.LoggingController}),this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new Ge.default({state:r,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new C.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&this.loggingController.add({type:F.LogType.GenericLog,data:{event:Ce.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:s}})})),this.appMetadataController=new ft.default({state:r.AppMetadataController,messenger:this.controllerMessenger.getRestricted({name:"AppMetadataController",allowedActions:[],allowedEvents:[]}),currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:s});const a=()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(g.providerErrors.userRejectedRequest())};this.approvalController=new M.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[K.ApprovalType.PersonalSign,K.ApprovalType.EthSignTypedData,K.ApprovalType.Transaction,K.ApprovalType.WatchAsset,K.ApprovalType.EthGetEncryptionPublicKey,K.ApprovalType.EthDecrypt]}),this.queuedRequestController=new Y.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController",allowedActions:["NetworkController:getState","NetworkController:setActiveNetwork","SelectedNetworkController:getNetworkClientIdForDomain"],allowedEvents:["SelectedNetworkController:stateChange"]}),shouldRequestSwitchNetwork:({method:e})=>se.methodsRequiringNetworkSwitch.includes(e),canRequestSwitchNetworkWithoutApproval:({method:e})=>se.methodsThatCanSwitchNetworkWithoutApproval.includes(e),clearPendingConfirmations:a,showApprovalRequest:()=>{this.approvalController.getTotalApprovalCount()>0&&e.showUserConfirmation()}});const i=this.controllerMessenger.getRestricted({name:"NetworkController"});let l=r.NetworkController;if(!l){l=(0,I.getDefaultNetworkControllerState)();const e=l.networkConfigurationsByChainId;let t;e[ie.CHAIN_IDS.MAINNET].name=ie.MAINNET_DISPLAY_NAME,delete e[ie.CHAIN_IDS.GOERLI],delete e[ie.CHAIN_IDS.LINEA_GOERLI],Object.values(e).forEach((e=>{const t=e.rpcEndpoints[0].networkClientId;e.blockExplorerUrls=[K.BlockExplorerUrl[t]],e.defaultBlockExplorerUrlIndex=0})),t=e[ie.CHAIN_IDS.MAINNET],l.selectedNetworkClientId=t.rpcEndpoints[t.defaultRpcEndpointIndex].networkClientId}this.networkController=new I.NetworkController({messenger:i,state:l,infuraProjectId:e.infuraProjectId}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkVersions={};const c=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange"],allowedActions:["KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new q.AccountsController({messenger:c,state:r.AccountsController});const d=this.controllerMessenger.getRestricted({name:"PreferencesController",allowedActions:["AccountsController:setSelectedAccount","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","NetworkController:getState"],allowedEvents:["AccountsController:stateChange"]});this.preferencesController=new rt.PreferencesController({state:{currentLocale:e.initLangCode??"",...r.PreferencesController},messenger:d});const p=this.controllerMessenger.getRestricted({name:"TokenListController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]});this.tokenListController=new o.TokenListController({chainId:Xt(rn,this,ln).call(this,{metamask:this.networkController.state}),preventPollingOnNetworkRestart:!Xt(rn,this,an).call(this,this.preferencesController.state),messenger:p,state:r.TokenListController});const m=this.controllerMessenger.getRestricted({name:"AssetsContractController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getSelectedNetworkClient","NetworkController:getState"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.assetsContractController=new o.AssetsContractController({messenger:m,chainId:Xt(rn,this,ln).call(this)});const b=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount","AccountsController:getAccount"],allowedEvents:["NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokenListController:stateChange","NetworkController:stateChange"]});this.tokensController=new o.TokensController({state:r.TokensController,provider:this.provider,messenger:b,chainId:Xt(rn,this,ln).call(this)});const S=this.controllerMessenger.getRestricted({name:"NftController",allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange"],allowedActions:[`${this.approvalController.name}:addRequest`,`${this.networkController.name}:getNetworkClientById`,"AccountsController:getSelectedAccount","AccountsController:getAccount","AssetsContractController:getERC721AssetName","AssetsContractController:getERC721AssetSymbol","AssetsContractController:getERC721TokenURI","AssetsContractController:getERC721OwnerOf","AssetsContractController:getERC1155BalanceOf","AssetsContractController:getERC1155TokenURI"]});this.nftController=new o.NftController({state:r.NftController,messenger:S,chainId:Xt(rn,this,ln).call(this),onNftAdded:({address:e,symbol:t,tokenId:n,standard:r,source:s})=>this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.NftAdded,category:ge.MetaMetricsEventCategory.Wallet,sensitiveProperties:{token_contract_address:e,token_symbol:t,token_id:n,token_standard:r,asset_type:oe.AssetType.NFT,source:s}})});const $=this.controllerMessenger.getRestricted({name:"NftDetectionController",allowedEvents:["NetworkController:stateChange","PreferencesController:stateChange"],allowedActions:["ApprovalController:addRequest","NetworkController:getState","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount"]});this.nftDetectionController=new o.NftDetectionController({messenger:$,chainId:Xt(rn,this,ln).call(this),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftState:()=>this.nftController.state,disabled:!this.preferencesController.state.useNftDetection});const V=this.controllerMessenger.getRestricted({name:"MetaMetricsController",allowedActions:["PreferencesController:getState","NetworkController:getState","NetworkController:getNetworkClientById"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.metaMetricsController=new dt.default({state:r.MetaMetricsController,messenger:V,segment:ut.segment,version:"12.11.0",environment:"production",extension:this.extension,captureException:A.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const Z=new wt.DataDeletionService,ee=this.controllerMessenger.getRestricted({name:"MetaMetricsDataDeletionController",allowedActions:["MetaMetricsController:getState"],allowedEvents:[]});this.metaMetricsDataDeletionController=new vt.MetaMetricsDataDeletionController({dataDeletionService:Z,messenger:ee,state:r.metaMetricsDataDeletionController});const te=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),ce=ae.GAS_API_BASE_URL;this.gasFeeController=new R.GasFeeController({state:r.GasFeeController,interval:1e4,messenger:te,clientId:ae.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{i.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${ce}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${ce}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>Xt(rn,this,ln).call(this)===ie.CHAIN_IDS.BSC,getChainId:()=>Xt(rn,this,ln).call(this)}),this.appStateController=new st.AppStateController({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),state:r.AppStateController,onInactiveTimeout:()=>this.setLocked(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,"PreferencesController:getState"],allowedEvents:["KeyringController:qrKeyringStateChange","PreferencesController:stateChange"]}),extension:this.extension});const de=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new o.CurrencyRateController({includeUsdRate:!0,messenger:de,state:r.CurrencyController});const fe=this.currencyRateController.fetchMultiExchangeRate.bind(this.currencyRateController);this.currencyRateController.fetchMultiExchangeRate=(...e)=>this.preferencesController.state.useCurrencyRateCheck?fe(...e):{conversionRate:null,usdConversionRate:null};const ye=this.controllerMessenger.getRestricted({name:"TokenBalancesController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokensController:getState","PreferencesController:getState","AccountsController:getSelectedAccount"],allowedEvents:["PreferencesController:stateChange","TokensController:stateChange","NetworkController:stateChange"]});this.tokenBalancesController=new o.TokenBalancesController({messenger:ye,state:r.TokenBalancesController,interval:3e4});const ve=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new N.PhishingController({messenger:ve,state:r.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined}),this.ppomController=new W.PPOMController({messenger:this.controllerMessenger.getRestricted({name:"PPOMController",allowedEvents:["NetworkController:stateChange","NetworkController:networkDidChange"],allowedActions:["NetworkController:getNetworkClientById"]}),storageBackend:new kt.IndexedDBPPOMStorage("PPOMDB",1),provider:this.provider,ppomProvider:{PPOM:qe.PPOM,ppomInit:()=>qe.default("./ppom_bg.wasm")},state:r.PPOMController,chainId:Xt(rn,this,ln).call(this),securityAlertsEnabled:this.preferencesController.state.securityAlertsEnabled,onPreferencesChange:d.subscribe.bind(d,"PreferencesController:stateChange"),cdnBaseUrl:"static.cx.metamask.io/api/v1/confirmations/ppom",blockaidPublicKey:"066ad3e8af5583385e312c156d238055215d5f25247c1e91055afa756cb98a88"});const we=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new _.AnnouncementController({messenger:we,allAnnouncements:he.UI_NOTIFICATIONS,state:r.AnnouncementController});const be=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new Ze.NetworkOrderController({messenger:be,state:r.NetworkOrderController});const ke=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new et.AccountOrderController({messenger:ke,state:r.AccountOrderController});const Ae=this.controllerMessenger.getRestricted({name:"BalancesController",allowedEvents:["AccountsController:accountAdded","AccountsController:accountRemoved"],allowedActions:["AccountsController:listMultichainAccounts","SnapController:handleRequest"]});this.multichainBalancesController=new De.BalancesController({messenger:Ae,state:r.MultichainBalancesController});const Me=this.controllerMessenger.getRestricted({name:"RatesController"});this.multichainRatesController=new o.RatesController({state:r.MultichainRatesController,messenger:Me,includeUsdRate:!0,fetchMultiExchangeRate:o.fetchMultiExchangeRate});const Ee=this.controllerMessenger.getRestricted({name:"TokenRatesController",allowedActions:["TokensController:getState","NetworkController:getNetworkClientById","NetworkController:getState","AccountsController:getAccount","AccountsController:getSelectedAccount"],allowedEvents:["NetworkController:stateChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokensController:stateChange"]});this.tokenRatesController=new o.TokenRatesController({state:r.TokenRatesController,messenger:Ee,tokenPricesService:new o.CodefiTokenPricesServiceV2,disabled:!this.preferencesController.state.useCurrencyRateCheck}),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:n}=e,{useCurrencyRateCheck:r}=t;r&&!n?this.tokenRatesController.enable():!r&&n&&this.tokenRatesController.disable()}),this.preferencesController.state)),this.ensController=new P.EnsController({messenger:this.controllerMessenger.getRestricted({name:"EnsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:[]}),onNetworkDidChange:i.subscribe.bind(i,"NetworkController:networkDidChange")});const Pe=this.controllerMessenger.getRestricted({name:"OnboardingController",allowedActions:[],allowedEvents:[]});this.onboardingController=new at.default({messenger:Pe,state:r.OnboardingController});let Ie=[(0,h.keyringBuilderFactory)(k.MetaMaskKeyring)];const Re=null===(t=this.opts.overrides)||void 0===t?void 0:t.keyrings;if(!1===Se.isManifestV3){const e=[(null==Re?void 0:Re.lattice)||w.default,k.MetaMaskKeyring],t=[{keyring:(null==Re?void 0:Re.trezor)||y.TrezorKeyring,bridge:(null==Re?void 0:Re.trezorBridge)||y.TrezorConnectBridge},{keyring:(null==Re?void 0:Re.ledger)||v.LedgerKeyring,bridge:(null==Re?void 0:Re.ledgerBridge)||v.LedgerIframeBridge}];Ie=e.map((e=>(0,h.keyringBuilderFactory)(e))),t.forEach((e=>Ie.push((0,gt.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else Ie.push((0,gt.hardwareKeyringBuilderFactory)(y.TrezorKeyring,(null==Re?void 0:Re.trezorBridge)||At.TrezorOffscreenBridge),(0,gt.hardwareKeyringBuilderFactory)(v.LedgerKeyring,(null==Re?void 0:Re.ledgerBridge)||Tt.LedgerOffscreenBridge),(0,h.keyringBuilderFactory)(_t.LatticeKeyringOffscreen));const Oe=this.controllerMessenger.getRestricted({name:"SnapKeyringBuilder",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName"]});Ie.push((0,Mt.snapKeyringBuilder)(Oe,(()=>this.snapController),(async()=>{await this.keyringController.persistAllKeyrings(),await this.accountsController.updateAccounts()}),(e=>this.removeAccount(e)),this.metaMetricsController.trackEvent.bind(this.metaMetricsController),(e=>{if(!e)return null;const t=this.getLocale(),{snaps:n}=this.snapController.state,r=n[e];if(!r)return(0,X.stripSnapPrefix)(e);if(r.localizationFiles){return(0,X.getLocalizedSnapManifest)(r.manifest,t,r.localizationFiles).proposedName}return r.manifest.proposedName}),(e=>It.default.some((t=>t.snapId===e)))));const Be=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new h.KeyringController({cacheEncryptionKey:!0,keyringBuilders:Ie,state:r.KeyringController,encryptor:e.encryptor||(0,Et.encryptorFactory)(6e5),messenger:Be}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new O.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:r.PermissionController,caveatSpecifications:(0,yt.getCaveatSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController)}),permissionSpecifications:{...(0,yt.getPermissionSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e=[],t=[])=>{const n=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),r=e.length,s=Object.keys(this.accountTrackerController.state.accounts||{}).length;(0,A.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${r} identities, and the ${n} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:yt.unrestrictedMethods}),this.selectedNetworkController=new x.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState","NetworkController:getSelectedNetworkClient","PermissionController:hasPermissions","PermissionController:getSubjectNames"],allowedEvents:["NetworkController:stateChange","PermissionController:stateChange"]}),state:r.SelectedNetworkController,useRequestQueuePreference:!0,onPreferencesStateChange:()=>{},domainProxyMap:new Rt.WeakRefObjectMap}),this.permissionLogController=new U.PermissionLogController({messenger:this.controllerMessenger.getRestricted({name:"PermissionLogController"}),restrictedMethods:new Set(Object.keys(ue.RestrictedMethods)),state:r.PermissionLogController}),this.subjectMetadataController=new O.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:r.SubjectMetadataController,subjectCacheLimit:100});const xe=Se.isManifestV3&&"undefined"!=typeof chrome&&void 0!==chrome.offscreen,Fe={messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=!1===xe?new j.IframeExecutionService({...Fe,iframeUrl:new URL("https://execution.metamask.io/iframe/6.12.0/index.html")}):new j.OffscreenExecutionService({...Fe,offscreenPromise:this.offscreenPromise});const Ue=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse","KeyringController:lock"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,`${this.subjectMetadataController.name}:addSubjectMetadata`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update","SnapsRegistry:resolveVersion","SnapInterfaceController:createInterface","SnapInterfaceController:getInterface"]}),Ke=!0;this.snapController=new j.SnapController({environmentEndowmentPermissions:Object.values(ue.EndowmentPermissions),excludedPermissions:{...ue.ExcludedSnapPermissions,...ue.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:r.SnapController,messenger:Ue,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!1,requireAllowlist:Ke,rejectInvalidPlatformVersion:!0},encryptor:(0,Et.encryptorFactory)(6e5),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),preinstalledSnaps:It.default,getFeatureFlags:()=>({disableSnaps:!1===this.preferencesController.state.useExternalServices})}),this.rateLimitController=new L.RateLimitController({state:r.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const n=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==n?void 0:n.name)??e,t).catch((e=>{f.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>{const{message:n,title:r,footerLink:s,interfaceId:o}=t,a={title:r,...s?{footerLink:s}:{},interfaceId:o},i={data:{message:n,origin:e,...o?{detailedView:a}:{}},type:Zt.SNAP,readDate:null};return this.controllerMessenger.call("NotificationServicesController:updateMetamaskNotificationsList",i),null},rateLimitCount:5,rateLimitTimeout:6e4}}});const Ve=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapUninstalled","SnapController:snapEnabled","SnapController:snapDisabled"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new j.CronjobController({state:r.CronjobController,messenger:Ve});const ze=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new j.JsonSnapsRegistry({state:r.SnapsRegistry,messenger:ze,refetchOnAllowlistMiss:Ke,url:{registry:"https://acl.execution.metamask.io/latest/registry.json",signature:"https://acl.execution.metamask.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"});const Ye=this.controllerMessenger.getRestricted({name:"SnapInterfaceController",allowedActions:[`${this.phishingController.name}:maybeUpdateState`,`${this.phishingController.name}:testOrigin`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.snapController.name}:get`],allowedEvents:["NotificationServicesController:notificationsListUpdated"]});this.snapInterfaceController=new j.SnapInterfaceController({state:r.SnapInterfaceController,messenger:Ye});const Qe=this.controllerMessenger.getRestricted({name:"SnapInsightsController",allowedActions:[`${this.snapController.name}:handleRequest`,`${this.snapController.name}:getAll`,`${this.permissionController.name}:getPermissions`,`${this.snapInterfaceController.name}:deleteInterface`],allowedEvents:["TransactionController:unapprovedTransactionAdded","TransactionController:transactionStatusUpdated","SignatureController:stateChange"]});this.snapInsightsController=new j.SnapInsightsController({state:r.SnapInsightsController,messenger:Qe}),this.authenticationController=new ne.AuthenticationController.Controller({state:r.AuthenticationController,messenger:this.controllerMessenger.getRestricted({name:"AuthenticationController",allowedActions:["KeyringController:getState","SnapController:handleRequest"],allowedEvents:["KeyringController:lock","KeyringController:unlock"]}),metametrics:{getMetaMetricsId:()=>this.metaMetricsController.getMetaMetricsId(),agent:"extension"}}),this.userStorageController=new ne.UserStorageController.Controller({getMetaMetricsState:()=>this.metaMetricsController.state.participateInMetaMetrics??!1,state:r.UserStorageController,config:{accountSyncing:{onAccountAdded:e=>{this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.ProfileSyncing,event:ge.MetaMetricsEventName.AccountsSyncAdded,properties:{profile_id:e}})},onAccountNameUpdated:e=>{this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.ProfileSyncing,event:ge.MetaMetricsEventName.AccountsSyncNameUpdated,properties:{profile_id:e}})},onAccountSyncErroneousSituation:(e,t,n)=>{(0,A.captureException)(new Error(`Account sync - ${t}`),n),this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.ProfileSyncing,event:ge.MetaMetricsEventName.AccountsSyncErroneousSituation,properties:{profile_id:e,situation_message:t}})}}},env:{isAccountSyncingEnabled:Se.isManifestV3},messenger:this.controllerMessenger.getRestricted({name:"UserStorageController",allowedActions:["KeyringController:getState","KeyringController:addNewAccount","SnapController:handleRequest","AuthenticationController:getBearerToken","AuthenticationController:getSessionProfile","AuthenticationController:isSignedIn","AuthenticationController:performSignOut","AuthenticationController:performSignIn","NotificationServicesController:disableNotificationServices","NotificationServicesController:selectIsNotificationServicesEnabled","AccountsController:listAccounts","AccountsController:updateAccountMetadata","NetworkController:getState","NetworkController:addNetwork","NetworkController:removeNetwork","NetworkController:updateNetwork"],allowedEvents:["KeyringController:lock","KeyringController:unlock","AccountsController:accountAdded","AccountsController:accountRenamed","NetworkController:networkRemoved"]})}),this.controllerMessenger.subscribe("MetaMetricsController:stateChange",(0,pt.previousValueComparator)((async(e,t)=>{const{participateInMetaMetrics:n}=e,{participateInMetaMetrics:r}=t,s=n&&!r,o=!n&&r;if(!s&&!o)return;const a=o&&!this.authenticationController.state.isSignedIn,i=s&&this.authenticationController.state.isSignedIn&&!this.userStorageController.state.isProfileSyncingEnabled;a?await this.authenticationController.performSignIn():i&&await this.authenticationController.performSignOut()}),this.metaMetricsController.state));const Je=this.controllerMessenger.getRestricted({name:"NotificationServicesPushController",allowedActions:["AuthenticationController:getBearerToken"],allowedEvents:[]});this.notificationServicesPushController=new re.NotificationServicesPushController.Controller({messenger:Je,state:r.NotificationServicesPushController,env:{apiKey:"AIzaSyAA6MJdRkQ00zNh_moTLwxCSxcg3vznbBM",authDomain:"notifications-faf39.firebaseapp.com",storageBucket:"notifications-faf39.appspot.com",projectId:"notifications-faf39",messagingSenderId:"824598429541",appId:"1:824598429541:web:3016d3c90f1f19a6beab8c",measurementId:"G-1FGDTTCWX5",vapidKey:"BBbjhCfHvwIqRsUrBvpfx0viLJIzWHp-beyw8-I124jeZlhNGDOegS_0_I029fFb2stzRuaNkCdTAf9F3I2m3wc"},config:{isPushEnabled:Se.isManifestV3,platform:"extension",onPushNotificationReceived:$t.onPushNotificationReceived,onPushNotificationClicked:$t.onPushNotificationClicked}}),Je.subscribe("NotificationServicesPushController:onNewNotifications",(e=>{this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.PushNotifications,event:ge.MetaMetricsEventName.PushNotificationReceived,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),Je.subscribe("NotificationServicesPushController:pushNotificationClicked",(e=>{this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.PushNotifications,event:ge.MetaMetricsEventName.PushNotificationClicked,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.notificationServicesController=new re.NotificationServicesController.Controller({messenger:this.controllerMessenger.getRestricted({name:"NotificationServicesController",allowedActions:["KeyringController:getAccounts","KeyringController:getState","AuthenticationController:getBearerToken","AuthenticationController:isSignedIn","UserStorageController:enableProfileSyncing","UserStorageController:getStorageKey","UserStorageController:performGetStorage","UserStorageController:performSetStorage","NotificationServicesPushController:enablePushNotifications","NotificationServicesPushController:disablePushNotifications","NotificationServicesPushController:subscribeToPushNotifications","NotificationServicesPushController:updateTriggerPushNotifications"],allowedEvents:["KeyringController:stateChange","KeyringController:lock","KeyringController:unlock","NotificationServicesPushController:onNewNotifications"]}),state:r.NotificationServicesController,env:{isPushIntegrated:Se.isManifestV3,featureAnnouncements:{platform:"extension",spaceId:"jdkgyfmyd9sw",accessToken:"mAYNB_k65snv4AXW4o8ksZN8BwWDQF9702HKV7yBDZI"}}}),this.accountTrackerController=new We.default({state:{accounts:{}},messenger:this.controllerMessenger.getRestricted({name:"AccountTrackerController",allowedActions:["AccountsController:getSelectedAccount","NetworkController:getState","NetworkController:getNetworkClientById","OnboardingController:getState","PreferencesController:getState"],allowedEvents:["AccountsController:selectedEvmAccountChange","OnboardingController:stateChange","KeyringController:accountRemoved"]}),provider:this.provider,blockTracker:this.blockTracker,getNetworkIdentifier:e=>{const{type:t,rpcUrl:n}=e??(0,Ne.getProviderConfig)({metamask:this.networkController.state});return t===ie.NETWORK_TYPES.RPC?n:t}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.state;e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.controllerMessenger.subscribe(`${this.onboardingController.name}:stateChange`,(0,pt.previousValueComparator)((async(e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r}=t;if(!n&&r){const{address:e}=this.accountsController.getSelectedAccount();await this._addAccountsWithBalance(),this.postOnboardingInitialization(),this.triggerNetworkrequests(),await this.tokenDetectionController.detectTokens({selectedAddress:e})}}),this.onboardingController.state));const Xe=this.controllerMessenger.getRestricted({name:"TokenDetectionController",allowedActions:["AccountsController:getAccount","AccountsController:getSelectedAccount","KeyringController:getState","NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getState","PreferencesController:getState","TokenListController:getState","TokensController:getState","TokensController:addDetectedTokens"],allowedEvents:["AccountsController:selectedEvmAccountChange","KeyringController:lock","KeyringController:unlock","NetworkController:networkDidChange","PreferencesController:stateChange","TokenListController:stateChange"]});this.tokenDetectionController=new o.TokenDetectionController({messenger:Xe,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),useAccountsAPI:!0,platform:"extension"});const tt=this.controllerMessenger.getRestricted({name:"AddressBookController",allowedActions:[],allowedEvents:[]});this.addressBookController=new T.AddressBookController({messenger:tt,state:r.AddressBookController}),this.alertController=new ot.AlertController({state:r.AlertController,messenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new it.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})};const nt=this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`,"NetworkController:findNetworkClientIdByChainId","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount"],allowedEvents:["NetworkController:stateChange"]});this.txController=new J.TransactionController({getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getNetworkClientRegistry:this.networkController.getNetworkClientRegistry.bind(this.networkController),getNetworkState:()=>this.networkController.state,getPermittedAccounts:this.getPermittedAccounts.bind(this),getSavedGasFees:()=>{const e=Xt(rn,this,ln).call(this);return this.preferencesController.state.advancedGasFee[e]},incomingTransactions:{etherscanApiKeysByChainId:{[ie.CHAIN_IDS.MAINNET]:"HF4132KPUFK3EA3AUYSAVWB9D1QSTIZWHJ",[ie.CHAIN_IDS.SEPOLIA]:"HF4132KPUFK3EA3AUYSAVWB9D1QSTIZWHJ"},includeTokenTransfers:!1,isEnabled:()=>{var e;return(null===(e=this.preferencesController.state.incomingTransactionsPreferences)||void 0===e?void 0:e[Xt(rn,this,ln).call(this)])&&this.onboardingController.state.completedOnboarding},queryEntireHistory:!1,updateTransactions:!1},isFirstTimeInteractionEnabled:()=>this.preferencesController.state.securityAlertsEnabled,isSimulationEnabled:()=>this.preferencesController.state.useTransactionSimulations,messenger:nt,pendingTransactions:{isResubmitEnabled:()=>{const e=this._getMetaMaskState();return!((0,Te.getSmartTransactionsPreferenceEnabled)(e)&&(0,Te.getCurrentChainSupportsSmartTransactions)(e))}},testGasFeeFlows:!1,trace:_e.trace,hooks:{publish:this._publishSmartTransactionHook.bind(this)},sign:(...e)=>this.keyringController.signTransaction(...e),state:r.TransactionController}),this._addTransactionControllerListeners(),this.decryptMessageController=new lt.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Ct.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new G.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`,`${this.networkController.name}:getNetworkClientById`]}),trace:_e.trace,decodingApiUrl:"https://signature-insights.api.cx.metamask.io/v1",isDecodeSignatureRequestEnabled:()=>!0===this.preferencesController.state.useExternalServices&&this.preferencesController.state.useTransactionSimulations}),this.signatureController.hub.on("cancelWithReason",(({metadata:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:ge.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})}));const ht=this.controllerMessenger.getRestricted({name:"SwapsController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokenRatesController:getState"],allowedEvents:[]});this.swapsController=new ct.default({messenger:ht,getBufferedGasLimit:async(e,t)=>{const{gas:n,simulationFails:r}=await this.txController.estimateGasBuffered(e.txParams,t,Xt(rn,this,cn).call(this));return{gasLimit:n,simulationFails:r}},getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getLayer1GasFee:this.txController.getLayer1GasFee.bind(this.txController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},r.SwapsController);const bt=this.controllerMessenger.getRestricted({name:jt.BRIDGE_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedAccount","NetworkController:getSelectedNetworkClient","NetworkController:findNetworkClientIdByChainId"],allowedEvents:[]});this.bridgeController=new Lt.default({messenger:bt,getLayer1GasFee:this.txController.getLayer1GasFee.bind(this.txController)});const St=this.controllerMessenger.getRestricted({name:Wt.BRIDGE_STATUS_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedAccount","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId","NetworkController:getState","TransactionController:getState"],allowedEvents:[]});this.bridgeStatusController=new Gt.default({messenger:St,state:r.BridgeStatusController});const Ot=this.controllerMessenger.getRestricted({name:"SmartTransactionsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]});this.smartTransactionsController=new B.default({supportedChainIds:(0,le.getAllowedSmartTransactionsChainIds)(),clientId:D.ClientId.Extension,getNonceLock:e=>this.txController.getNonceLock(e,Xt(rn,this,cn).call(this)),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),state:r.SmartTransactionsController,messenger:Ot,getTransactions:this.txController.getTransactions.bind(this.txController),updateTransaction:this.txController.updateTransaction.bind(this.txController),getFeatureFlags:()=>{const e=this._getMetaMaskState();return(0,Te.getFeatureFlagsByChainId)(e)},getMetaMetricsProps:async()=>{const e=this.accountsController.getSelectedAccount().address;return{accountHardwareType:await(0,Te.getHardwareWalletType)(this._getMetaMaskState()),accountType:await this.getAccountType(e),deviceModel:await this.getDeviceModel(e)}}});const Bt=()=>this.preferencesController.state.useExternalNameSources;this.nameController=new z.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new z.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new z.EtherscanNameProvider({isEnabled:Bt}),new z.TokenNameProvider({isEnabled:Bt}),new z.LensNameProvider({isEnabled:Bt}),new Le.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:r.NameController});const Dt=this.controllerMessenger.getRestricted({name:"PetnamesBridge",allowedEvents:["NameController:stateChange","AccountsController:stateChange","AddressBookController:stateChange"],allowedActions:["AccountsController:listAccounts"]});new je.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:Dt}).init(),new $e.AccountIdentitiesPetnamesBridge({nameController:this.nameController,messenger:Dt}).init(),this.userOperationController=new Q.UserOperationController({entrypoint:null,getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","KeyringController:prepareUserOperation","KeyringController:patchUserOperation","KeyringController:signUserOperation"]}),state:r.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),i.subscribe("NetworkController:networkDidChange",(()=>{this.accountTrackerController.updateAccounts()})),i.subscribe("NetworkController:networkWillChange",a.bind(this)),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)(((e,t)=>{const{useExternalServices:n}=e,{useExternalServices:r}=t;r&&!n?(this.remoteFeatureFlagController.enable(),this.remoteFeatureFlagController.updateRemoteFeatureFlags()):!r&&n&&this.remoteFeatureFlagController.disable()}),this.preferencesController.state)),this.remoteFeatureFlagController=new H.RemoteFeatureFlagController({messenger:this.controllerMessenger.getRestricted({name:"RemoteFeatureFlagController",allowedActions:[],allowedEvents:[]}),disabled:!this.preferencesController.state.useExternalServices,getMetaMetricsId:()=>this.metaMetricsController.getMetaMetricsId(),clientConfigApiService:new H.ClientConfigApiService({fetch:globalThis.fetch.bind(globalThis),config:{client:H.ClientType.Extension,distribution:this._getConfigForRemoteFeatureFlagRequest().distribution,environment:this._getConfigForRemoteFeatureFlagRequest().environment}})}),this.metamaskMiddleware=(0,mt.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${s}`},version:s,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===me.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:(e,t)=>(0,Pt.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processTypedMessage:(...e)=>(0,Nt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV3:(...e)=>(0,Nt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV4:(...e)=>(0,Nt.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processPersonalMessage:(...e)=>(0,Nt.addPersonalMessage)({signatureController:this.signatureController,signatureParams:e}),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===J.TransactionStatus.submitted))}),this.on("update",(e=>this._onStateUpdate(e)));const xt={AccountTracker:this.accountTrackerController,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController,BridgeController:this.bridgeController,BridgeStatusController:this.bridgeStatusController,EnsController:this.ensController,ApprovalController:this.approvalController,PPOMController:this.ppomController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,MultichainBalancesController:this.multichainBalancesController,TransactionController:this.txController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,PPOMController:this.ppomController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,...xt}),this.memStore=new Ge.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,MultichainBalancesController:this.multichainBalancesController,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController,OnboardingController:this.onboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,TxController:this.txController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,QueuedRequestController:this.queuedRequestController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,...xt},controllerMessenger:this.controllerMessenger});const Ft=[this.accountTrackerController.resetState.bind(this.accountTrackerController),this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState.bind(this.swapsController),this.bridgeController.resetState.bind(this.bridgeController),this.ensController.resetState.bind(this.ensController),this.approvalController.clear.bind(this.approvalController)];Se.isManifestV3?!0===n&&(this.resetStates(Ft),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Ft);!this.isUnlocked()&&this.onboardingController.state.completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.setupMultichainDataAndSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(He.onMessageReceived),(0,He.checkForMultipleVersionsRunning)(),this.onboardingController.state.completedOnboarding&&this.postOnboardingInitialization()}getInfuraFeatureFlags(){(0,Oe.default)({url:"https://swap.api.cx.metamask.io/featureFlags",cacheRefreshTime:20*pe.MINUTE}).then(this.onFeatureFlagResponseReceived).catch((e=>{f.default.warn("Feature flag endpoint is unreachable",e)}))}onFeatureFlagResponseReceived(e){const{multiChainAssets:t={}}=e,{pollInterval:n}=t;n>0&&this.tokenBalancesController.setIntervalLength(n*pe.SECOND)}postOnboardingInitialization(){const{usePhishDetect:e}=this.preferencesController.state;this.networkController.lookupNetwork(),e&&this.phishingController.maybeUpdateState();const t=this.preferencesController.state,{useTokenDetection:n,useNftDetection:r}=t??{};this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.Onboarding,event:ge.MetaMetricsUserTrait.TokenDetectionEnabled,properties:{[ge.MetaMetricsUserTrait.TokenDetectionEnabled]:n}}),this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.Onboarding,event:ge.MetaMetricsUserTrait.NftAutodetectionEnabled,properties:{[ge.MetaMetricsUserTrait.NftAutodetectionEnabled]:r}})}triggerNetworkrequests(){this.txController.stopIncomingTransactionPolling(),this.txController.startIncomingTransactionPolling([Xt(rn,this,ln).call(this)]),this.tokenDetectionController.enable(),this.getInfuraFeatureFlags()}stopNetworkRequests(){this.txController.stopIncomingTransactionPolling(),this.tokenDetectionController.disable()}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(de.KeyringType.snap);return e||(e=await this.keyringController.addNewKeyring(de.KeyringType.snap)),e}trackInsightSnapView(e){this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.InsightSnapViewed,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:e}})}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.state;return e}getPrivacyMode(){const{privacyMode:e}=this.preferencesController.state;return e}getSnapPermissionSpecifications(){return{...(0,$.buildSnapEndowmentSpecifications)(Object.keys(ue.ExcludedSnapEndowments)),...(0,$.buildSnapRestrictedMethodSpecifications)(Object.keys(ue.ExcludedSnapPermissions),{getPreferences:()=>({locale:this.getLocale(),currency:this.currencyRateController.state.currentCurrency,hideBalances:this.getPrivacyMode()}),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>{const{message:n,title:r,footerLink:s}=t,o={interfaceId:t.content,message:n,title:r,footerLink:s};return this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,o)},updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.state;e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.state;return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface"),getInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:getInterface"),getClientCryptography:()=>({}),getSnapKeyring:this.getSnapKeyring.bind(this)})}}setupControllerEventSubscriptions(){let e;this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,pt.previousValueComparator)((async(e,t)=>{var n;const{currentLocale:r}=t,s=Xt(rn,this,ln).call(this);await(0,St.updateCurrentLocale)(r),null!==(n=t.incomingTransactionsPreferences)&&void 0!==n&&n[s]?(this.txController.stopIncomingTransactionPolling(),this.txController.startIncomingTransactionPolling([Xt(rn,this,ln).call(this)])):this.txController.stopIncomingTransactionPolling(),Xt(rn,this,on).call(this,t,e)}),this.preferencesController.state)),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,yt.diffMap)(e,t);for(const[e,t]of n.entries())this._notifyAccountsChange(e,t)}),yt.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,yt.diffMap)(e,t);for(const[e,t]of n.entries()){const n=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:r}=this.networkController.getNetworkConfigurationByNetworkClientId(n);if(t.length>0&&!t.includes(r)){const n=this.networkController.findNetworkClientIdByChainId(t[0]);this.networkController.setActiveNetwork(n),this.selectedNetworkController.setNetworkClientIdForDomain(e,n)}}}),yt.getPermittedChainsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{await this.txController.stopIncomingTransactionPolling(),await this.txController.updateIncomingTransactions([Xt(rn,this,ln).call(this)]),await this.txController.startIncomingTransactionPolling([Xt(rn,this,ln).call(this)])})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallStarted`,((e,t,n)=>{var r;const s=null===(r=this._getSnapMetadata(e))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:n?ge.MetaMetricsEventName.SnapUpdateStarted:ge.MetaMetricsEventName.SnapInstallStarted,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallFailed`,((e,t,n,r)=>{var s;const o=r.includes("User rejected the request."),a=n?ge.MetaMetricsEventName.SnapUpdateFailed:ge.MetaMetricsEventName.SnapInstallFailed,i=n?ge.MetaMetricsEventName.SnapUpdateRejected:ge.MetaMetricsEventName.SnapInstallRejected,l=null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:o?i:a,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:l}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t,n)=>{var r;if(n)return;const s=e.id,o=null===(r=this._getSnapMetadata(s))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.SnapInstalled,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:s,version:e.version,origin:t,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,n,r)=>{var s;if(r)return;const o=e.id,a=null===(s=this._getSnapMetadata(o))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.SnapUpdated,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:o,old_version:t,new_version:e.version,origin:n,snap_category:a}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(ue.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const n=this.notificationServicesController.getNotificationsByType(Zt.SNAP).filter((t=>t.data.origin===e.id)).map((e=>e.id));this.notificationServicesController.deleteNotificationsById(n);const r=e.id,s=null===(t=this._getSnapMetadata(r))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.SnapUninstalled,category:ge.MetaMetricsEventCategory.Snaps,properties:{snap_id:r,version:e.version,snap_category:s}})}))}setupMultichainDataAndSubscriptions(){(0,te.isEvmAccountType)(this.accountsController.getSelectedMultichainAccount().type)||this.multichainRatesController.start(),this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(e=>{(0,te.isEvmAccountType)(e.type)?this.multichainRatesController.stop():this.multichainRatesController.start()})),this.multichainBalancesController.start(),this.multichainBalancesController.updateBalances(),this.controllerMessenger.subscribe("CurrencyRateController:stateChange",(({currentCurrency:e})=>{e!==this.multichainRatesController.state.fiatCurrency&&this.multichainRatesController.setFiatCurrency(e)}))}createPublicConfigStore(){const e=new l.ObservableStore,t=async({isUnlocked:e})=>{const{chainId:t,networkVersion:n,isConnected:r}=await this.getProviderNetworkState();return{isUnlocked:e,chainId:t,networkVersion:r?n:"loading"}},n=async n=>{var r;(null===(r=n.networksMetadata[n.selectedNetworkClientId])||void 0===r?void 0:r.status)===ie.NetworkStatus.Available&&e.putState(await t(n))};return this.on("update",n),n(this.getState()),e}async getProviderState(e){const t=await this.getProviderNetworkState(e);return{isUnlocked:this.isUnlocked(),accounts:await this.getPermittedAccounts(e),...t}}async getProviderNetworkState(e=x.METAMASK_DOMAIN){const t=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e),n=this.controllerMessenger.call("NetworkController:getNetworkClientById",t),{chainId:r}=n.configuration,{completedOnboarding:s}=this.onboardingController.state;let o=this.deprecatedNetworkVersions[t];if(o===undefined&&s){try{const e=await n.provider.request({method:"net_version"});o=(0,Ae.convertNetworkId)(e)}catch(e){console.error(e),o=null}this.deprecatedNetworkVersions[t]=o}const a=this.networkController.state.networksMetadata[t];return{chainId:r,networkVersion:o??"loading",isConnected:(null==a?void 0:a.status)===ie.NetworkStatus.Available}}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),n=this.memStore.getFlatState();return{isInitialized:t,...(0,Ht.sanitizeUIState)(n)}}getApi(){const{accountsController:e,addressBookController:t,alertController:n,appStateController:r,keyringController:s,nftController:o,nftDetectionController:a,currencyRateController:i,tokenBalancesController:l,tokenDetectionController:c,ensController:d,tokenListController:u,gasFeeController:h,metaMetricsController:p,networkController:m,announcementController:g,onboardingController:C,permissionController:f,preferencesController:y,tokensController:v,smartTransactionsController:w,txController:b,assetsContractController:k,backup:S,approvalController:A,phishingController:T,tokenRatesController:M,accountTrackerController:E,authenticationController:P,userStorageController:N,notificationServicesController:_,notificationServicesPushController:I}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:y.setUseBlockie.bind(y),setUseNonceField:y.setUseNonceField.bind(y),setUsePhishDetect:y.setUsePhishDetect.bind(y),setUseMultiAccountBalanceChecker:y.setUseMultiAccountBalanceChecker.bind(y),setUseSafeChainsListValidation:y.setUseSafeChainsListValidation.bind(y),setUseTokenDetection:y.setUseTokenDetection.bind(y),setUseNftDetection:y.setUseNftDetection.bind(y),setUse4ByteResolution:y.setUse4ByteResolution.bind(y),setUseCurrencyRateCheck:y.setUseCurrencyRateCheck.bind(y),setOpenSeaEnabled:y.setOpenSeaEnabled.bind(y),getProviderConfig:()=>(0,Ne.getProviderConfig)({metamask:this.networkController.state}),grantPermissionsIncremental:this.permissionController.grantPermissionsIncremental.bind(this.permissionController),grantPermissions:this.permissionController.grantPermissions.bind(this.permissionController),setSecurityAlertsEnabled:y.setSecurityAlertsEnabled.bind(y),setAddSnapAccountEnabled:y.setAddSnapAccountEnabled.bind(y),setBitcoinSupportEnabled:y.setBitcoinSupportEnabled.bind(y),setBitcoinTestnetSupportEnabled:y.setBitcoinTestnetSupportEnabled.bind(y),setUseExternalNameSources:y.setUseExternalNameSources.bind(y),setUseTransactionSimulations:y.setUseTransactionSimulations.bind(y),setIpfsGateway:y.setIpfsGateway.bind(y),setIsIpfsGatewayEnabled:y.setIsIpfsGatewayEnabled.bind(y),setUseAddressBarEnsResolution:y.setUseAddressBarEnsResolution.bind(y),setParticipateInMetaMetrics:p.setParticipateInMetaMetrics.bind(p),setDataCollectionForMarketing:p.setDataCollectionForMarketing.bind(p),setMarketingCampaignCookieId:p.setMarketingCampaignCookieId.bind(p),setCurrentLocale:y.setCurrentLocale.bind(y),setIncomingTransactionsPreferences:y.setIncomingTransactionsPreferences.bind(y),setServiceWorkerKeepAlivePreference:y.setServiceWorkerKeepAlivePreference.bind(y),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getNextAvailableAccountName:e.getNextAvailableAccountName.bind(e),getAccountsBySnapId:e=>(0,Mt.getAccountsBySnapId)(this,e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),getDeviceNameForMetric:this.getDeviceNameForMetric.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:s.submitQRCryptoHDKey.bind(s),submitQRHardwareCryptoAccount:s.submitQRCryptoAccount.bind(s),cancelSyncQRHardware:s.cancelQRSynchronization.bind(s),submitQRHardwareSignature:s.submitQRSignature.bind(s),cancelQRHardwareSignRequest:s.cancelQRSignRequest.bind(s),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setActiveNetwork:e=>this.networkController.setActiveNetwork(e),setActiveNetworkConfigurationId:e=>{this.networkController.setActiveNetwork(e)},setNetworkClientIdForDomain:(e,t)=>this.selectedNetworkController.setNetworkClientIdForDomain(e,t),rollbackToPreviousProvider:m.rollbackToPreviousProvider.bind(m),addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),removeNetwork:this.networkController.removeNetwork.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getNetworkConfigurationByNetworkClientId:this.networkController.getNetworkConfigurationByNetworkClientId.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id)},toggleExternalServices:this.toggleExternalServices.bind(this),addToken:v.addToken.bind(v),updateTokenType:v.updateTokenType.bind(v),setFeatureFlag:y.setFeatureFlag.bind(y),setPreference:y.setPreference.bind(y),addKnownMethodData:y.addKnownMethodData.bind(y),setDismissSeedBackUpReminder:y.setDismissSeedBackUpReminder.bind(y),setOverrideContentSecurityPolicyHeader:y.setOverrideContentSecurityPolicyHeader.bind(y),setAdvancedGasFee:y.setAdvancedGasFee.bind(y),setTheme:y.setTheme.bind(y),setSnapsAddSnapAccountModalDismissed:y.setSnapsAddSnapAccountModalDismissed.bind(y),setSelectedInternalAccount:e=>{this.accountsController.getAccount(e)&&this.accountsController.setSelectedAccount(e)},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{const n=this.accountsController.getAccountByAddress(e);if(n===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(n.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),addNft:o.addNft.bind(o),addNftVerifyOwnership:o.addNftVerifyOwnership.bind(o),removeAndIgnoreNft:o.removeAndIgnoreNft.bind(o),removeNft:o.removeNft.bind(o),checkAndUpdateAllNftsOwnershipStatus:o.checkAndUpdateAllNftsOwnershipStatus.bind(o),checkAndUpdateSingleNftOwnershipStatus:o.checkAndUpdateSingleNftOwnershipStatus.bind(o),getNFTContractInfo:o.getNFTContractInfo.bind(o),isNftOwner:o.isNftOwner.bind(o),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:r.setLastActiveTime.bind(r),setCurrentExtensionPopupId:r.setCurrentExtensionPopupId.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setSurveyLinkLastClickedOrClosed:r.setSurveyLinkLastClickedOrClosed.bind(r),setOnboardingDate:r.setOnboardingDate.bind(r),setLastViewedUserSurvey:r.setLastViewedUserSurvey.bind(r),setNewPrivacyPolicyToastClickedOrClosed:r.setNewPrivacyPolicyToastClickedOrClosed.bind(r),setNewPrivacyPolicyToastShownDate:r.setNewPrivacyPolicyToastShownDate.bind(r),setSnapsInstallPrivacyWarningShownStatus:r.setSnapsInstallPrivacyWarningShownStatus.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowPermissionsTour:r.setShowPermissionsTour.bind(r),setShowAccountBanner:r.setShowAccountBanner.bind(r),setShowNetworkBanner:r.setShowNetworkBanner.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),setSwitchedNetworkDetails:r.setSwitchedNetworkDetails.bind(r),clearSwitchedNetworkDetails:r.clearSwitchedNetworkDetails.bind(r),setSwitchedNetworkNeverShowMessage:r.setSwitchedNetworkNeverShowMessage.bind(r),getLastInteractedConfirmationInfo:r.getLastInteractedConfirmationInfo.bind(r),setLastInteractedConfirmationInfo:r.setLastInteractedConfirmationInfo.bind(r),updateSlides:r.updateSlides.bind(r),removeSlide:r.removeSlide.bind(r),tryReverseResolveAddress:d.reverseResolveAddress.bind(d),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:b.updateTransaction.bind(b),approveTransactionsWithSameNonce:b.approveTransactionsWithSameNonce.bind(b),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),estimateGasFee:b.estimateGasFee.bind(b),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,Pt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1})),addTransactionAndWaitForPublish:(e,t)=>(0,Pt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0})),createTransactionEventFragment:xe.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),getTransactions:this.txController.getTransactions.bind(this.txController),updateEditableParams:this.txController.updateEditableParams.bind(this.txController),updateTransactionGasFees:b.updateTransactionGasFees.bind(b),updateTransactionSendFlowHistory:b.updateTransactionSendFlowHistory.bind(b),updatePreviousGasParams:b.updatePreviousGasParams.bind(b),abortTransactionSigning:b.abortTransactionSigning.bind(b),getLayer1GasFee:b.getLayer1GasFee.bind(b),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:C.setSeedPhraseBackedUp.bind(C),completeOnboarding:C.completeOnboarding.bind(C),setFirstTimeFlowType:C.setFirstTimeFlowType.bind(C),setAlertEnabledness:n.setAlertEnabledness.bind(n),setUnconnectedAccountAlertShown:n.setUnconnectedAccountAlertShown.bind(n),setWeb3ShimUsageAlertDismissed:n.setWeb3ShimUsageAlertDismissed.bind(n),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,yt.getPermissionBackgroundApiMethods)(f),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),disconnectOriginFromSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disconnectOrigin"),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await T.maybeUpdateState(),T.test(e)),deleteInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:deleteInterface"),updateInterfaceState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterfaceState"),fetchAndSetQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:fetchAndSetQuotes"),setSelectedQuoteAggId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSelectedQuoteAggId"),resetSwapsState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetSwapsState"),setSwapsTokens:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTokens"),clearSwapsQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:clearSwapsQuotes"),setApproveTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setApproveTxId"),setTradeTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setTradeTxId"),setSwapsTxGasPrice:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasPrice"),setSwapsTxGasLimit:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasLimit"),setSwapsTxMaxFeePerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePerGas"),setSwapsTxMaxFeePriorityPerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePriorityPerGas"),safeRefetchQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:safeRefetchQuotes"),stopPollingForQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:stopPollingForQuotes"),setBackgroundSwapRouteState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setBackgroundSwapRouteState"),resetPostFetchState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetPostFetchState"),setSwapsErrorKey:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsErrorKey"),setInitialGasEstimate:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setInitialGasEstimate"),setCustomApproveTxData:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setCustomApproveTxData"),setSwapsLiveness:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsLiveness"),setSwapsFeatureFlags:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsFeatureFlags"),setSwapsUserFeeLevel:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsUserFeeLevel"),setSwapsQuotesPollingLimitEnabled:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsQuotesPollingLimitEnabled"),[Be.BridgeBackgroundAction.SET_FEATURE_FLAGS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeBackgroundAction.SET_FEATURE_FLAGS}`),[Be.BridgeBackgroundAction.RESET_STATE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeBackgroundAction.RESET_STATE}`),[Be.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeBackgroundAction.GET_BRIDGE_ERC20_ALLOWANCE}`),[Be.BridgeUserAction.SELECT_SRC_NETWORK]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeUserAction.SELECT_SRC_NETWORK}`),[Be.BridgeUserAction.SELECT_DEST_NETWORK]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeUserAction.SELECT_DEST_NETWORK}`),[Be.BridgeUserAction.UPDATE_QUOTE_PARAMS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${jt.BRIDGE_CONTROLLER_NAME}:${Be.BridgeUserAction.UPDATE_QUOTE_PARAMS}`),[Ie.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${Wt.BRIDGE_STATUS_CONTROLLER_NAME}:${Ie.BridgeStatusAction.START_POLLING_FOR_BRIDGE_TX_STATUS}`),fetchSmartTransactionFees:w.getFees.bind(w),clearSmartTransactionFees:w.clearFees.bind(w),submitSignedTransactions:w.submitSignedTransactions.bind(w),cancelSmartTransaction:w.cancelSmartTransaction.bind(w),fetchSmartTransactionsLiveness:w.fetchLiveness.bind(w),updateSmartTransaction:w.updateSmartTransaction.bind(w),setStatusRefreshInterval:w.setStatusRefreshInterval.bind(w),trackMetaMetricsEvent:p.trackEvent.bind(p),trackMetaMetricsPage:p.trackPage.bind(p),createEventFragment:p.createEventFragment.bind(p),updateEventFragment:p.updateEventFragment.bind(p),finalizeEventFragment:p.finalizeEventFragment.bind(p),trackInsightSnapView:this.trackInsightSnapView.bind(this),rejectAllPendingApprovals:this.rejectAllPendingApprovals.bind(this),rejectPendingApproval:this.rejectPendingApproval,requestUserApproval:A.addAndShowApprovalRequest.bind(A),resolvePendingApproval:this.resolvePendingApproval,resetViewedNotifications:g.resetViewed.bind(g),updateViewedNotifications:g.updateViewed.bind(g),currencyRateStartPolling:i.startPolling.bind(i),currencyRateStopPollingByPollingToken:i.stopPollingByPollingToken.bind(i),tokenRatesStartPolling:M.startPolling.bind(M),tokenRatesStopPollingByPollingToken:M.stopPollingByPollingToken.bind(M),accountTrackerStartPolling:E.startPollingByNetworkClientId.bind(E),accountTrackerStopPollingByPollingToken:E.stopPollingByPollingToken.bind(E),tokenDetectionStartPolling:c.startPolling.bind(c),tokenDetectionStopPollingByPollingToken:c.stopPollingByPollingToken.bind(c),tokenListStartPolling:u.startPolling.bind(u),tokenListStopPollingByPollingToken:u.stopPollingByPollingToken.bind(u),tokenBalancesStartPolling:l.startPolling.bind(l),tokenBalancesStopPollingByPollingToken:l.stopPollingByPollingToken.bind(l),gasFeeStartPolling:h.startPolling.bind(h),gasFeeStopPollingByPollingToken:h.stopPollingByPollingToken.bind(h),getGasFeeTimeEstimate:h.getTimeEstimate.bind(h),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),backupUserData:S.backupUserData.bind(S),restoreUserData:S.restoreUserData.bind(S),detectTokens:c.detectTokens.bind(c),detectNfts:a.detectNfts.bind(a),addDetectedTokens:v.addDetectedTokens.bind(v),addImportedTokens:v.addTokens.bind(v),ignoreTokens:v.ignoreTokens.bind(v),getBalancesInSingleCall:k.getBalancesInSingleCall.bind(k),performSignIn:P.performSignIn.bind(P),performSignOut:P.performSignOut.bind(P),enableProfileSyncing:N.enableProfileSyncing.bind(N),disableProfileSyncing:N.disableProfileSyncing.bind(N),setIsProfileSyncingEnabled:N.setIsProfileSyncingEnabled.bind(N),syncInternalAccountsWithUserStorage:N.syncInternalAccountsWithUserStorage.bind(N),deleteAccountSyncingDataFromUserStorage:N.performDeleteStorageAllFeatureEntries.bind(N),checkAccountsPresence:_.checkAccountsPresence.bind(_),createOnChainTriggers:_.createOnChainTriggers.bind(_),deleteOnChainTriggersByAccount:_.deleteOnChainTriggersByAccount.bind(_),updateOnChainTriggersByAccount:_.updateOnChainTriggersByAccount.bind(_),fetchAndUpdateMetamaskNotifications:_.fetchAndUpdateMetamaskNotifications.bind(_),deleteNotificationsById:_.deleteNotificationsById.bind(_),getNotificationsByType:_.getNotificationsByType.bind(_),markMetamaskNotificationsAsRead:_.markMetamaskNotificationsAsRead.bind(_),setFeatureAnnouncementsEnabled:_.setFeatureAnnouncementsEnabled.bind(_),enablePushNotifications:I.enablePushNotifications.bind(I),disablePushNotifications:I.disablePushNotifications.bind(I),updateTriggerPushNotifications:I.updateTriggerPushNotifications.bind(I),enableMetamaskNotifications:_.enableMetamaskNotifications.bind(_),disableMetamaskNotifications:_.disableNotificationServices.bind(_),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController),multichainUpdateBalance:e=>this.multichainBalancesController.updateBalance(e),multichainUpdateBalances:()=>this.multichainBalancesController.updateBalances(),decodeTransactionData:e=>(0,Ut.decodeTransactionData)({...e,provider:this.provider}),createMetaMetricsDataDeletionTask:this.metaMetricsDataDeletionController.createMetaMetricsDataDeletionTask.bind(this.metaMetricsDataDeletionController),updateDataDeletionTaskStatus:this.metaMetricsDataDeletionController.updateDataDeletionTaskStatus.bind(this.metaMetricsDataDeletionController),endTrace:_e.endTrace}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,n){var r,s;const{tokenList:o}=this.tokenListController.state,{tokens:a}=this.tokensController.state,i={...be.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{},...o[e.toLowerCase()]||{},...a.find((({address:t})=>(0,ve.isEqualCaseInsensitive)(t,e)))||{}},l=(0,ve.isEqualCaseInsensitive)(i.standard,oe.TokenStandard.ERC20)||!0===i.erc20,c=!(n||(0,ve.isEqualCaseInsensitive)(i.standard,oe.TokenStandard.ERC1155)||(0,ve.isEqualCaseInsensitive)(i.standard,oe.TokenStandard.ERC721)||i.erc721),d=i.decimals!==undefined&&i.symbol;let u;if(l||c&&d)try{const n=t?await(0,ye.fetchTokenBalance)(e,t,this.provider):undefined;u={address:e,balance:n,standard:oe.TokenStandard.ERC20,decimals:i.decimals,symbol:i.symbol}}catch(e){f.default.warn(`Failed to get token balance. Error: ${e}`)}if(u===undefined)try{u=await this.assetsContractController.getTokenStandardAndDetails(e,t,n)}catch(e){f.default.warn(`Failed to get token standard and details. Error: ${e}`)}if(u){if((0,ve.isEqualCaseInsensitive)(u.standard,oe.TokenStandard.ERC1155))try{const r=await(0,ye.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;u={...u,balance:s}}catch(e){f.default.warn("Failed to get token balance. Error:",e)}}return{...u,decimals:null===(r=u)||void 0===r||null===(r=r.decimals)||void 0===r?void 0:r.toString(10),balance:null===(s=u)||void 0===s||null===(s=s.balance)||void 0===s?void 0:s.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{return await this.keyringController.createNewVaultAndKeychain(e)}finally{t()}}async createNewVaultAndRestore(e,n){const r=await this.createVaultMutex.acquire();try{const{completedOnboarding:r}=this.onboardingController.state,s=t.from(n);this.permissionController.clearState(),this.snapController.clearState(),this.accountTrackerController.clearAccounts(),this.txController.clearUnapprovedTransactions(),r&&this.tokenDetectionController.enable(),await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(s)),r&&(await this._addAccountsWithBalance(),this.setLedgerTransportPreference())}finally{r()}}async _addAccountsWithBalance(){try{const n=Xt(rn,this,ln).call(this),r=await this.keyringController.getAccounts();let s=r[r.length-1];for(let o=r.length;;o++){if("0x0"===await this.getBalance(s,this.provider)){var e,t;await this.tokenDetectionController.detectTokens({chainIds:[n],selectedAddress:s});const r=null===(e=this.tokensController.state.allTokens)||void 0===e||null===(e=e[n])||void 0===e?void 0:e[s],a=null===(t=this.tokensController.state.allDetectedTokens)||void 0===t||null===(t=t[n])||void 0===t?void 0:t[s];if(0===((null==r?void 0:r.length)??0)&&0===((null==a?void 0:a.length)??0)){1!==o&&await this.removeAccount(s);break}}s=await this.keyringController.addNewAccount(o)}}catch(e){f.default.warn(`Failed to add accounts with balance. Error: ${e}`)}finally{await this.userStorageController.setIsAccountSyncingReadyToBeDispatched(!0)}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>V.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>V.wordlist[e])).join(" "))}async getBalance(e,t){const n=this.accountTrackerController.state.accounts[e];if(n&&n.balance)return n.balance;try{return await t.request({method:"eth_getBalance",params:[e,"latest"]})||"0x0"}catch(e){throw f.default.error(e),e}}async submitPassword(e){const{completedOnboarding:t}=this.onboardingController.state;await this.offscreenPromise,await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){f.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),t&&this.setLedgerTransportPreference()}async _loginUser(e){try{await this.submitPassword(e),await this.accountTrackerController.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:n}=this.keyringController.state;if(JSON.parse(n).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(de.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var n,r,s,o;const a=null===(n=this.opts.overrides)||void 0===n?void 0:n.keyrings;let i=null;switch(e){case ce.HardwareDeviceNames.trezor:i=(null==a||null===(r=a.trezor)||void 0===r?void 0:r.type)||y.TrezorKeyring.type;break;case ce.HardwareDeviceNames.ledger:i=(null==a||null===(s=a.ledger)||void 0===s?void 0:s.type)||v.LedgerKeyring.type;break;case ce.HardwareDeviceNames.qr:i=k.MetaMaskKeyring.type;break;case ce.HardwareDeviceNames.lattice:i=(null==a||null===(o=a.lattice)||void 0===o?void 0:o.type)||w.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(i);if(l||(l=await this.keyringController.addNewKeyring(i)),t&&l.setHdPath&&l.setHdPath(t),e===ce.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===ce.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=(0,Ne.getProviderConfig)({metamask:this.networkController.state}).type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(ce.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async connectHardware(e,t,n){const r=await this.getKeyringForDevice(e,n);e===ce.HardwareDeviceNames.ledger&&await this.setLedgerTransportPreference(r);let s=[];switch(t){case-1:s=await r.getPreviousPage();break;case 1:s=await r.getNextPage();break;default:s=await r.getFirstPage()}const o=await this.keyringController.getAccounts(),a=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTrackerController.syncWithAddresses(a),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async getDeviceNameForMetric(e,t){if(e===ce.HardwareDeviceNames.trezor){const n=await this.getKeyringForDevice(e,t),{minorVersion:r}=n.bridge;if(r&&r===en)return ce.HardwareDeviceNames.oneKeyViaTrezor}return e}async forgetDevice(e){const t=await this.getKeyringForDevice(e);for(const e of t.accounts)await this.removeAccount(e);return t.forgetDevice(),!0}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case de.KeyringType.trezor:case de.KeyringType.lattice:case de.KeyringType.qr:case de.KeyringType.ledger:return"hardware";case de.KeyringType.imported:return"imported";case de.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case de.KeyringType.trezor:return t.getModel();case de.KeyringType.qr:return t.getName();case de.KeyringType.ledger:return ce.HardwareDeviceNames.ledger;case de.KeyringType.lattice:return ce.HardwareDeviceNames.lattice;default:return undefined}}getAccountLabel(e,t,n){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${n||""}`.trim()}async unlockHardwareWalletAccount(e,t,n,r){const s=await this.getKeyringForDevice(t,n);s.setAccountToUnlock(e);const o=await this.keyringController.addNewAccountForKeyring(s),a=this.getAccountLabel(t===ce.HardwareDeviceNames.qr?s.getName():t,e,r);this.preferencesController.setAccountLabel(o,a),this.preferencesController.setSelectedAddress(o);const i=this.accountsController.getAccountByAddress(o);this.accountsController.setAccountName(i.id,a);const l=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.state;return{unlockedAccount:o,identities:c,accounts:l}}async addNewAccount(e){const t=await this.keyringController.getAccounts(),n=await this.keyringController.addNewAccount(e);return t.includes(n)||this.preferencesController.setSelectedAddress(n),n}async getSeedPhrase(e){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address,t=Xt(rn,this,ln).call(this);return this.txController.wipeTransactions({address:e,chainId:t}),this.smartTransactionsController.wipeSmartTransactions({address:e,ignoreNetwork:!1}),this.bridgeStatusController.wipeBridgeStatus({address:e,ignoreNetwork:!1}),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,ue.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===g.errorCodes.provider.unauthorized)return[];throw e}}removeAllChainIdPermissions(e){this.permissionController.updatePermissionsByCaveat(ue.CaveatTypes.restrictNetworkSwitching,(t=>yt.CaveatMutatorFactories[ue.CaveatTypes.restrictNetworkSwitching].removeChainId(e,t)))}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(ue.CaveatTypes.restrictReturnedAccounts,(t=>yt.CaveatMutatorFactories[ue.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const n=t?await t.getAccounts():{};var r;0===(null==n?void 0:n.length)&&(null===(r=t.destroy)||void 0===r||r.call(t));return e}async importAccountWithStrategy(e,t){const n=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(n)}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:n,...r}){var s;return{internalAccounts:this.accountsController.listAccounts(),dappRequest:n,networkClientId:(null==n?void 0:n.networkClientId)??Xt(rn,this,cn).call(this),selectedAccount:this.accountsController.getAccountByAddress(e.from),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,chainId:Xt(rn,this,ln).call(this),ppomController:this.ppomController,securityAlertsEnabled:null===(s=this.preferencesController.state)||void 0===s?void 0:s.securityAlertsEnabled,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this),...r}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,n){await this.txController.stopTransaction(e,t,n);return this.getState()}async createSpeedUpTransaction(e,t,n){await this.txController.speedUpTransaction(e,t,n);return this.getState()}async estimateGas(e){return new Promise(((t,n)=>{this.provider.request({method:"eth_estimateGas",params:[e]}).then((e=>t(e.toString(16)))).catch((e=>n(e)))}))}async updateSecurityAlertResponse(e,t,n){await(0,Dt.updateSecurityAlertResponse)({appStateController:this.appStateController,method:e,securityAlertId:t,securityAlertResponse:n,signatureController:this.signatureController,transactionController:this.txController})}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunicationEip1193({connectionStream:e,sender:t,subjectType:n}){if(t.url&&this.onboardingController.state.completedOnboarding&&this.preferencesController.state.usePhishDetect){const{hostname:n}=new URL(t.url);this.phishingController.maybeUpdateState();const r=this.phishingController.test(t.url);if(null!=r&&r.result)return this.sendPhishingWarning(e,n),void this.metaMetricsController.trackEvent({event:ge.MetaMetricsEventName.PhishingPageDisplayed,category:ge.MetaMetricsEventCategory.Phishing,properties:{url:n}})}let r;r=n||(t.id&&t.id!==this.extension.runtime.id?O.SubjectType.Extension:O.SubjectType.Website);const s=(0,nt.setupMultiplex)(e);this.setupProviderConnectionEip1193(s.createStream("metamask-provider"),t,r),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupUntrustedCommunicationCaip({connectionStream:e,sender:t,subjectType:n}){let r;r=n||(t.id&&t.id!==this.extension.runtime.id?O.SubjectType.Extension:O.SubjectType.Website);const s=(0,Me.createCaipStream)(e);this.setupProviderConnectionCaip(s,t,r)}setupTrustedCommunication(e,t){const n=(0,nt.setupMultiplex)(e);this.setupControllerConnection(n.createStream("controller")),this.setupProviderConnectionEip1193(n.createStream("provider"),t,O.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.state;if(!t)return;const n=(0,nt.setupMultiplex)(e).createStream("metamask-phishing-safelist");n.on("data",(0,ht.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},n))}setUpCookieHandlerCommunication({connectionStream:e}){const{metaMetricsId:t,dataCollectionForMarketing:n,participateInMetaMetrics:r}=this.metaMetricsController.state;if(t&&n&&r){const t=(0,nt.setupMultiplex)(e).createStream(Ot.METAMASK_COOKIE_HANDLER);t.on("data",(0,ht.default)({getCookieFromMarketingPage:this.getCookieFromMarketingPage.bind(this)},t))}}getCookieFromMarketingPage(e){const{ga_client_id:t}=e;this.metaMetricsController.setMarketingCampaignCookieId(t)}sendPhishingWarning(e,t){(0,nt.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=new qt.PatchStore(this.memStore);let n=!1;const r=()=>{if(!(0,nt.isStreamWritable)(e)||!n)return;const r=t.flushPendingPatches();e.write({jsonrpc:"2.0",method:"sendUpdate",params:[r]})},o={...this.getApi(),startPatches:()=>{n=!0,r()},getStatePatches:()=>t.flushPendingPatches()};this.on("update",r),this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,ht.default)(o,e));const a=()=>{(0,nt.isStreamWritable)(e)&&e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?a():this.once("startUISync",a);const i=()=>{e.mmFinished||(this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.mmFinished=!0,this.removeListener("update",r),t.destroy())};e.mmFinished=!1,(0,s.finished)(e,i),e.once("close",i),e.once("end",i)}setupProviderConnectionEip1193(e,t,n){let r,o;r=n===O.SubjectType.Internal?me.ORIGIN_METAMASK:n===O.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:O.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);let a=r;t.tab&&t.tab.url&&(a=new URL(t.tab.url).origin);const l=this.setupProviderEngineEip1193({origin:r,sender:t,subjectType:n,tabId:o,mainFrameOrigin:a}),c=(0,Ve.default)(),d=(0,i.createEngineStream)({engine:l}),u=this.addConnection(r,{engine:l});(0,s.pipeline)(e,c,d,e,(e=>{var t;l.destroy(),u&&this.removeConnection(r,u),!e||null!==(t=e.message)&&void 0!==t&&t.match("Premature close")||f.default.error(e)})),n!==O.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:l},r)}setupProviderConnectionCaip(e,t,n){let r,o;r=n===O.SubjectType.Internal?me.ORIGIN_METAMASK:n===O.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:O.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);const a=this.setupProviderEngineCaip({origin:r,tabId:o}),l=(0,Ve.default)(),c=(0,i.createEngineStream)({engine:a}),d=this.addConnection(r,{engine:a});(0,s.pipeline)(e,l,c,e,(e=>{a._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),d&&this.removeConnection(r,d),e&&f.default.error(e)})),n!==O.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:a},r)}setupSnapProvider(e,t){this.setupUntrustedCommunicationEip1193({connectionStream:t,sender:{snapId:e},subjectType:O.SubjectType.Snap})}setupProviderEngineEip1193({origin:e,subjectType:t,sender:n,tabId:r,mainFrameOrigin:s}){const o=new a.JsonRpcEngine;o.push((0,Qe.default)({origin:e})),s&&o.push((0,Je.default)({mainFrameOrigin:s})),o.push((0,x.createSelectedNetworkMiddleware)(this.controllerMessenger));const i=(0,Y.createQueuedRequestMiddleware)({enqueueRequest:this.queuedRequestController.enqueueRequest.bind(this.queuedRequestController),shouldEnqueueRequest:e=>se.methodsThatShouldBeEnqueued.includes(e.method),useRequestQueue:()=>!0});o.push(i);const l=this.selectedNetworkController.getProviderAndBlockTracker(e),c=(0,p.default)(l),u=(0,m.default)(l);return u.events.on("notification",(e=>o.emit("notification",e))),r&&o.push((0,Xe.default)({tabId:r})),o.push((0,ze.default)({origin:e})),o.push(this.permissionLogController.createMiddleware()),e===Ee.BaseUrl.Portfolio&&o.push((0,Bt.createTxVerificationMiddleware)(this.networkController)),o.push((0,Kt.default)()),o.push((0,Ke.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.accountsController,this.updateSecurityAlertResponse.bind(this))),o.push((0,bt.default)({getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),isConfirmationRedesignEnabled:this.isConfirmationRedesignEnabled.bind(this),isRedesignedConfirmationsDeveloperEnabled:this.isConfirmationRedesignDeveloperEnabled.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController,metaMetricsController:this.metaMetricsController})),o.push((0,Ye.createUnsupportedMethodMiddleware)()),o.push((0,Ye.createLegacyMethodMiddleware)({getAccounts:this.getPermittedAccounts.bind(this,e)})),t!==O.SubjectType.Internal&&o.push(this.permissionController.createPermissionMiddleware({origin:e})),t===O.SubjectType.Website&&o.push((0,tt.default)({location:n.url,registerOnboarding:this.onboardingController.registerOnboarding})),o.push((0,xt.default)({messenger:this.controllerMessenger.getRestricted({name:"EvmMethodsToNonEvmAccountFilterMessenger",allowedActions:["AccountsController:getSelectedAccount"]})})),o.push((0,Ye.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{},...!(0,X.isSnapId)(e)&&{[yt.PermissionNames.permittedChains]:{}}}),requestPermittedChainsPermission:t=>this.permissionController.requestPermissionsIncremental({origin:e},{[yt.PermissionNames.permittedChains]:{caveats:[yt.CaveatFactories[ue.CaveatTypes.restrictNetworkSwitching](t)]}}),grantPermittedChainsPermissionIncremental:t=>this.permissionController.grantPermissionsIncremental({subject:{origin:e},approvedPermissions:{[yt.PermissionNames.permittedChains]:{caveats:[yt.CaveatFactories[ue.CaveatTypes.restrictNetworkSwitching](t)]}}}),requestPermissionsForOrigin:t=>this.permissionController.requestPermissions({origin:e},{...t[yt.PermissionNames.eth_accounts]&&{[yt.PermissionNames.permittedChains]:{}},...t[yt.PermissionNames.permittedChains]&&{[yt.PermissionNames.eth_accounts]:{}},...t}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCaveat:({target:t,caveatType:n})=>{try{return this.permissionController.getCaveat(e,t,n)}catch(e){if(!(e instanceof O.PermissionDoesNotExistError))throw e}return undefined},setActiveNetwork:async t=>{await this.networkController.setActiveNetwork(t),this.permissionController.hasPermission(e,yt.PermissionNames.eth_accounts)&&this.selectedNetworkController.setNetworkClientIdForDomain(e,t)},addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),getNetworkConfigurationByChainId:this.networkController.getNetworkConfigurationByChainId.bind(this.networkController),getCurrentChainIdForDomain:e=>{const t=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:n}=this.networkController.getNetworkConfigurationByNetworkClientId(t);return n},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),o.push((0,$.createSnapsMethodMiddleware)(t===O.SubjectType.Snap,{clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState",e),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState",e),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),invokeSnap:this.permissionController.executeRestrictedMethod.bind(this.permissionController,e,ue.RestrictedMethods.wallet_snap),getIsLocked:()=>!this.appStateController.isUnlocked(),getInterfaceState:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).state,getInterfaceContext:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).context,createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface",e),updateInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterface",e),resolveInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:resolveInterface",e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),getCurrencyRate:e=>{const t=this.multichainRatesController.state.rates[e],{fiatCurrency:n}=this.multichainRatesController.state;return t?{...t,currency:n}:undefined},hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),scheduleBackgroundEvent:t=>this.controllerMessenger.call("CronjobController:scheduleBackgroundEvent",{...t,snapId:e}),cancelBackgroundEvent:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:cancelBackgroundEvent",e),getBackgroundEvents:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:getBackgroundEvents",e),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,Ue.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),o.push(c),o.push(u.middleware),o.push(this.metamaskMiddleware),o.push((0,d.providerAsMiddleware)(l.provider)),o}setupProviderEngineCaip({origin:e,tabId:t}){const n=new a.JsonRpcEngine;return n.push(((n,r,s,o)=>(console.log("CAIP request received",{origin:e,tabId:t,request:n}),o(new Error("CAIP RPC Pipeline not yet implemented."))))),n}setupPublicConfig(e){const t=(0,c.storeAsStream)(this.publicConfigStore);(0,s.pipeline)(t,e,(e=>{var n;t.destroy(),!e||null!==(n=e.message)&&void 0!==n&&n.match("Premature close")||f.default.error(e)}))}addConnection(e,{engine:t}){if(e===me.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const n=(0,S.nanoid)();return this.connections[e][n]={engine:t},n}removeConnection(e,t){const n=this.connections[e];n&&(delete n[t],0===Object.keys(n).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const n=this.connections[e];n&&Object.values(n).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async n=>{try{this.notifyConnection(n,await t(e))}catch(e){console.error(e)}}))}))}notifyConnection(e,t){try{e.engine&&e.engine.emit("notification",t)}catch(e){console.error(e)}}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,n=t.reduce(((e,{accounts:t})=>e.concat(t)),[]).filter(Ft.isEthAddress);n.length&&this.accountTrackerController.syncWithAddresses(n)}_onUnlock(){this.notifyAllConnections((async e=>({method:yt.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:yt.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}isConfirmationRedesignEnabled(){return this.preferencesController.state.preferences.redesignedConfirmationsEnabled}isConfirmationRedesignDeveloperEnabled(){return this.preferencesController.state.preferences.isRedesignedConfirmationsDeveloperEnabled}async initializeChainlist(){const e=`cachedFetch:${ie.CHAIN_SPEC_URL}`,{cachedResponse:t}=await(0,fe.getStorageItem)(e)||{};t||await(0,fe.setStorageItem)(e,{cachedResponse:(0,b.rawChainData)(),cachedTime:0})}async getPendingNonce(e,t){const{nonceDetails:n,releaseLock:r}=await this.txController.getNonceLock(e,t),s=n.params.highestSuggested;return r(),s}async getNextNonce(e,t){const n=await this.txController.getNonceLock(e,t);return n.releaseLock(),n.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addTransactionControllerListeners(){const e=this.getTransactionMetricsRequest();this.controllerMessenger.subscribe("TransactionController:postTransactionBalanceUpdated",xe.handlePostTransactionBalanceUpdate.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:unapprovedTransactionAdded",(t=>(0,xe.handleTransactionAdded)(e,{transactionMeta:t}))),this.controllerMessenger.subscribe("TransactionController:transactionApproved",xe.handleTransactionApproved.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionDropped",xe.handleTransactionDropped.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionConfirmed",xe.handleTransactionConfirmed.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionFailed",xe.handleTransactionFailed.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionNewSwap",(({transactionMeta:e})=>this.controllerMessenger.call("SwapsController:setTradeTxId",e.id))),this.controllerMessenger.subscribe("TransactionController:transactionNewSwapApproval",(({transactionMeta:e})=>this.controllerMessenger.call("SwapsController:setApproveTxId",e.id))),this.controllerMessenger.subscribe("TransactionController:transactionRejected",xe.handleTransactionRejected.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionSubmitted",xe.handleTransactionSubmitted.bind(null,e)),this.controllerMessenger.subscribe("TransactionController:transactionStatusUpdated",(({transactionMeta:e})=>{this._onFinishedTransaction(e)}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e)),getIsSmartTransaction:()=>(0,Te.getIsSmartTransaction)(this._getMetaMaskState()),getSmartTransactionByMinedTxHash:e=>this.smartTransactionsController.getSmartTransactionByMinedTxHash(e),getRedesignedConfirmationsEnabled:this.isConfirmationRedesignEnabled.bind(this),getMethodData:e=>{if(!e)return null;const{knownMethodData:t,use4ByteResolution:n}=this.preferencesController.state,r=(0,pt.addHexPrefix)(e);return(0,pt.getMethodDataName)(t,n,r,this.preferencesController.addKnownMethodData.bind(this.preferencesController),this.provider)},getIsRedesignedConfirmationsDeveloperEnabled:this.isConfirmationRedesignDeveloperEnabled.bind(this),getIsConfirmationAdvancedDetailsOpen:()=>this.preferencesController.state.preferences.showConfirmationAdvancedDetails},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}toggleExternalServices(e){this.preferencesController.toggleExternalServices(e),this.tokenListController.updatePreventPollingOnNetworkRestart(!e),e?(this.tokenDetectionController.enable(),this.gasFeeController.enableNonRPCGasFeeApis()):(this.tokenDetectionController.disable(),this.gasFeeController.disableNonRPCGasFeeApis())}async setLedgerTransportPreference(e){const t=window.navigator.hid?ce.LedgerTransportTypes.webhid:ce.LedgerTransportTypes.u2f,n=e||await this.getKeyringForDevice(ce.HardwareDeviceNames.ledger);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(t).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t="12.11.0";e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e}onClientClosed(){try{this.gasFeeController.stopAllPolling(),this.currencyRateController.stopAllPolling(),this.tokenRatesController.stopAllPolling(),this.tokenDetectionController.stopAllPolling(),this.tokenListController.stopAllPolling(),this.tokenBalancesController.stopAllPolling(),this.appStateController.clearPollingTokens(),this.accountTrackerController.stopAllPolling()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=me.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.state[t].forEach((e=>{this.gasFeeController.stopPollingByPollingToken(e),this.currencyRateController.stopPollingByPollingToken(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.Phishing,event:ge.MetaMetricsEventName.ProceedAnywayClicked,properties:{url:e,referrer:{url:e}}}),this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){this.metaMetricsController.trackEvent({category:ge.MetaMetricsEventCategory.Navigation,event:ge.MetaMetricsEventName.PortfolioLinkClicked,properties:{location:"phishing_page",text:"Back to safety"}}),await this.platform.switchToAnotherURL(undefined,"https://portfolio.metamask.io/?metamaskEntry=phishing_page_portfolio_button")}setLocked(){return this.keyringController.setLocked()}rejectAllPendingApprovals(){(0,Vt.rejectAllApprovals)({approvalController:this.approvalController,deleteInterface:e=>this.controllerMessenger.call("SnapInterfaceController:deleteInterface",e)})}async _onAccountChange(e){const t=(0,yt.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[n,r]of t.entries())r.includes(e)&&this._notifyAccountsChange(n,r);await this.txController.updateIncomingTransactions([Xt(rn,this,ln).call(this)])}async _notifyAccountsChange(e,t){this.isUnlocked()&&this.notifyConnections(e,{method:yt.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)}async _notifyChainChange(){this.notifyAllConnections((async e=>({method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(e)})))}async _notifyChainChangeForConnection(e,t){this.notifyConnection(e,{method:yt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(t)})}async _onFinishedTransaction(e){[J.TransactionStatus.confirmed,J.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),await this._updateNFTOwnership(e),this._trackTransactionFailure(e),await this.tokenBalancesController.updateBalancesByChainId({chainId:e.chainId}))}async _createTransactionNotifcation(e){const{chainId:t}=e;let n={};if(t){var r,s;const e=null===(r=this.networkController.state.networkConfigurationsByChainId)||void 0===r?void 0:r[t];n={blockExplorerUrl:null==e||null===(s=e.blockExplorerUrls)||void 0===s?void 0:s[null==e?void 0:e.defaultBlockExplorerUrlIndex]}}try{await this.platform.showTransactionNotification(e,n)}catch(e){f.default.error("Failed to create transaction notification",e)}}async _updateNFTOwnership(e){const{type:t,txParams:n,chainId:r,txReceipt:s}=e,o=this.accountsController.getSelectedAccount().address,{allNfts:a}=this.nftController.state,i=null==s?void 0:s.logs,l=t===J.TransactionType.contractInteraction&&i,c=(t===J.TransactionType.tokenMethodTransferFrom||t===J.TransactionType.tokenMethodSafeTransferFrom)&&n!==undefined;if(l||c)if(c){var d;const{data:e,to:t,from:s}=n,o=(0,we.parseStandardTokenTransactionData)(e),i=(0,ye.getTokenIdParam)(o)??(0,ke.getTokenValueParam)(o),l=null==a||null===(d=a[s])||void 0===d||null===(d=d[r])||void 0===d?void 0:d.find((({address:e,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(e,t)&&n===i));l&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(l,!1,{userAddress:s})}else{const e=i.map((e=>{const t=e.topics&&e.topics[0]===Pe.TRANSFER_SINFLE_LOG_TOPIC_HASH,n=e.topics&&e.topics[0]===Pe.TOKEN_TRANSFER_LOG_TOPIC_HASH;let r;return t&&(r=e.topics&&e.topics[3]&&e.topics[3].match(null==o?void 0:o.slice(2))),n&&(r=e.topics&&e.topics[2]&&e.topics[2].match(null==o?void 0:o.slice(2))),{isERC1155NftTransfer:t,isERC721NftTransfer:n,isTransferToSelectedAddress:r,...e}}));if(0!==e.length){const t=[];e.forEach((e=>{if(e.isTransferToSelectedAddress&&(e.isERC1155NftTransfer||e.isERC721NftTransfer)){let n;n=e.isERC1155NftTransfer?new Z.Interface(ee.abiERC1155):new Z.Interface(ee.abiERC721);try{const r=n.parseLog({data:e.data,topics:e.topics});t.push({contract:e.address,...r})}catch(e){}}}));const n=[],s=[];t.forEach((e=>{var t;const i=(0,ye.getTokenIdParam)(e),l=null==a||null===(t=a[o])||void 0===t||null===(t=t[r])||void 0===t?void 0:t.find((({address:t,tokenId:n})=>(0,ve.isEqualCaseInsensitive)(t,e.contract)&&n===i));l?n.push(l):s.push({tokenId:i,...e})}));const i=n.map((async e=>this.nftController.checkAndUpdateSingleNftOwnershipStatus(e,!1,{selectedAddress:o})));await Promise.allSettled(i);const l=s.map((async e=>this.nftController.addNft(e.contract,e.tokenId)));await Promise.allSettled(l)}}}_trackTransactionFailure(e){var t;const{txReceipt:n}=e,r=this.getState();n&&"0x0"===n.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:ge.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(t=e.simulationFails)||void 0===t?void 0:t.reason,numberOfTokens:r.tokens.length,numberOfAccounts:Object.keys(r.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===J.TransactionType.swap?this.controllerMessenger.publish("TransactionController:transactionNewSwap",{transactionMeta:t}):t.type===J.TransactionType.swapApproval&&this.controllerMessenger.publish("TransactionController:transactionNewSwapApproval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){const t={...e,txParams:{...e.txParams,from:this.accountsController.getSelectedAccount().address}};this.txController.state.transactions.some((e=>e.id===t.id))||this.txController.update((e=>{e.transactions.push(t)})),this.txController.updateTransaction(t,"Generated from user operation"),this.controllerMessenger.publish("TransactionController:transactionStatusUpdated",{transactionMeta:t})}_publishSmartTransactionHook(e,t){const n=this._getMetaMaskState(),r=(0,Te.getIsSmartTransaction)(n);if(!r)return{transactionHash:undefined};const s=(0,Te.getFeatureFlagsByChainId)(n);return(0,Fe.submitSmartTransactionHook)({transactionMeta:e,signedTransactionInHex:t,transactionController:this.txController,smartTransactionsController:this.smartTransactionsController,controllerMessenger:this.controllerMessenger,isSmartTransaction:r,isHardwareWallet:(0,Te.isHardwareWallet)(n),featureFlags:s})}_getMetaMaskState(){return{metamask:this.getState()}}_getConfigForRemoteFeatureFlagRequest(){return{distribution:nn.main||H.DistributionType.Main,environment:tn.production||H.EnvironmentType.Development}}}function on(e,t){const n=Xt(rn,this,an).call(this,t),r=Xt(rn,this,an).call(this,e);n!==r&&this.tokenListController.updatePreventPollingOnNetworkRestart(!r)}function an(e){const{useTokenDetection:t,useTransactionSimulations:n,preferences:r}=e??{},{petnamesEnabled:s}=r??{};return t||s||n}function ln(){const e=Xt(rn,this,cn).call(this);return this.networkController.getNetworkClientById(e).configuration.chainId}function cn(){return this.networkController.state.selectedNetworkClientId}n.default=sn}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[1360,{"./chunk-Z4BLTVTB.js":1362,immer:4681},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s=e("./chunk-Z4BLTVTB.js"),o=e("immer");o.enablePatches.call(void 0);function a(e,t,n){return Object.keys(e).reduce(((r,s)=>{try{const o=t[s];if(!o)throw new Error(`No metadata found for '${String(s)}'`);const a=o[n],i=e[s];return"function"==typeof a?r[s]=a(i):a&&(r[s]=i),r}catch(e){return setTimeout((()=>{throw e})),r}}),{})}r=new WeakMap,n.BaseController=class{constructor({messenger:e,metadata:t,name:n,state:a}){s.__privateAdd.call(void 0,this,r,void 0),this.messagingSystem=e,this.name=n,s.__privateSet.call(void 0,this,r,o.freeze.call(void 0,a,!0)),this.metadata=t,this.messagingSystem.registerActionHandler(`${n}:getState`,(()=>this.state)),this.messagingSystem.registerInitialEventPayload({eventType:`${n}:stateChange`,getPayload:()=>[this.state,[]]})}get state(){return s.__privateGet.call(void 0,this,r)}set state(e){throw new Error("Controller state cannot be directly mutated; use 'update' method instead.")}update(e){const[t,n,a]=o.produceWithPatches.call(void 0,s.__privateGet.call(void 0,this,r),e);return s.__privateSet.call(void 0,this,r,t),this.messagingSystem.publish(`${this.name}:stateChange`,t,n),{nextState:t,patches:n,inversePatches:a}}applyPatches(e){const t=o.applyPatches.call(void 0,s.__privateGet.call(void 0,this,r),e);s.__privateSet.call(void 0,this,r,t),this.messagingSystem.publish(`${this.name}:stateChange`,t,e)}destroy(){this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`)}},n.getAnonymizedState=function(e,t){return a(e,t,"anonymous")},n.getPersistentState=function(e,t){return a(e,t,"persist")}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js"}],[1361,{"./chunk-Z4BLTVTB.js":1362},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r,s,o,a,i,l,c,d,u,h,p=e("./chunk-Z4BLTVTB.js");r=new WeakMap,s=new WeakMap,o=new WeakMap,a=new WeakMap,i=new WeakSet,l=function(e){const t=p.__privateGet.call(void 0,this,a);return p.__privateMethod.call(void 0,this,u,h).call(this,e)||null!==t&&t.includes(e)},c=new WeakSet,d=function(e){const t=p.__privateGet.call(void 0,this,o);return p.__privateMethod.call(void 0,this,u,h).call(this,e)||null!==t&&t.includes(e)},u=new WeakSet,h=function(e){return e.startsWith(`${p.__privateGet.call(void 0,this,s)}:`)},n.RestrictedControllerMessenger=class{constructor({controllerMessenger:e,name:t,allowedActions:n,allowedEvents:l}){p.__privateAdd.call(void 0,this,i),p.__privateAdd.call(void 0,this,c),p.__privateAdd.call(void 0,this,u),p.__privateAdd.call(void 0,this,r,void 0),p.__privateAdd.call(void 0,this,s,void 0),p.__privateAdd.call(void 0,this,o,void 0),p.__privateAdd.call(void 0,this,a,void 0),p.__privateSet.call(void 0,this,r,e),p.__privateSet.call(void 0,this,s,t),p.__privateSet.call(void 0,this,o,n),p.__privateSet.call(void 0,this,a,l)}registerActionHandler(e,t){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed registering action handlers prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).registerActionHandler(e,t)}unregisterActionHandler(e){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed unregistering action handlers prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).unregisterActionHandler(e)}call(e,...t){if(!p.__privateMethod.call(void 0,this,c,d).call(this,e))throw new Error(`Action missing from allow list: ${e}`);return p.__privateGet.call(void 0,this,r).call(e,...t)}registerInitialEventPayload({eventType:e,getPayload:t}){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).registerInitialEventPayload({eventType:e,getPayload:t})}publish(e,...t){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).publish(e,...t)}subscribe(e,t,n){if(!p.__privateMethod.call(void 0,this,i,l).call(this,e))throw new Error(`Event missing from allow list: ${e}`);return n?p.__privateGet.call(void 0,this,r).subscribe(e,t,n):p.__privateGet.call(void 0,this,r).subscribe(e,t)}unsubscribe(e,t){if(!p.__privateMethod.call(void 0,this,i,l).call(this,e))throw new Error(`Event missing from allow list: ${e}`);p.__privateGet.call(void 0,this,r).unsubscribe(e,t)}clearEventSubscriptions(e){if(!p.__privateMethod.call(void 0,this,u,h).call(this,e))throw new Error(`Only allowed clearing events prefixed by '${p.__privateGet.call(void 0,this,s)}:'`);p.__privateGet.call(void 0,this,r).clearEventSubscriptions(e)}}}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js"}],[1362,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};n.__privateGet=(e,t,n)=>(r(e,t,"read from private field"),n?n.call(e):t.get(e)),n.__privateAdd=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},n.__privateSet=(e,t,n,s)=>(r(e,t,"write to private field"),s?s.call(e,n):t.set(e,n),n),n.__privateMethod=(e,t,n)=>(r(e,t,"access private method"),n)}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js"}],[1363,{"./chunk-FTHCJ6HY.js":1358,"./chunk-G42723LG.js":1359,"./chunk-IURK6TKD.js":1360,"./chunk-UJFCPTF3.js":1361,"./chunk-Z4BLTVTB.js":1362},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var r=e("./chunk-FTHCJ6HY.js"),s=e("./chunk-IURK6TKD.js"),o=e("./chunk-G42723LG.js"),a=e("./chunk-UJFCPTF3.js");e("./chunk-Z4BLTVTB.js"),n.BaseController=s.BaseController,n.BaseControllerV1=r.BaseControllerV1,n.ControllerMessenger=o.ControllerMessenger,n.RestrictedControllerMessenger=a.RestrictedControllerMessenger,n.getAnonymizedState=s.getAnonymizedState,n.getPersistentState=s.getPersistentState}}},{package:"@metamask/announcement-controller>@metamask/base-controller",file:"node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/index.js"}],[137,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:2,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[138,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:3,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[139,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:4,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[14,{"../../../../shared/modules/conversion.utils":5788,"../../../../shared/types/bridge-status":5816,"./constants":15,"./utils":16,"@metamask/polling-controller":2375},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/polling-controller"),s=e("../../../../shared/types/bridge-status"),o=e("../../../../shared/modules/conversion.utils"),a=e("./constants"),i=e("./utils");function l(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t,n){d(e,t),t.set(e,n)}function d(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function u(e,t){return e.get(h(e,t))}function h(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}const p={bridgeStatusState:{persist:!0,anonymous:!1}};var m=new WeakMap,g=new WeakMap,C=new WeakSet,f=new WeakMap,y=new WeakMap,v=new WeakMap,w=new WeakMap;class b extends((0,r.StaticIntervalPollingController)()){constructor({messenger:e,state:t}){var n,r;super({name:a.BRIDGE_STATUS_CONTROLLER_NAME,metadata:p,messenger:e,state:{...t,bridgeStatusState:{...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE,...null==t?void 0:t.bridgeStatusState}}}),d(n=this,r=C),r.add(n),c(this,m,{}),l(this,"resetState",(()=>{this.update((e=>{e.bridgeStatusState={...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE}}))})),l(this,"wipeBridgeStatus",(({address:e,ignoreNetwork:t})=>{if(t)this.update((e=>{e.bridgeStatusState={...a.DEFAULT_BRIDGE_STATUS_CONTROLLER_STATE}}));else{const{selectedNetworkClientId:t}=this.messagingSystem.call("NetworkController:getState"),n=this.messagingSystem.call("NetworkController:getNetworkClientById",t).configuration.chainId;u(w,this).call(this,e,n)}})),c(this,g,(()=>{const{bridgeStatusState:e}=this.state;Object.values(e.txHistory).filter((e=>e.status.status===s.StatusTypes.PENDING||e.status.status===s.StatusTypes.UNKNOWN)).filter((e=>{const t=e.txMetaId;return!u(m,this)[t]})).forEach((e=>{const t=e.txMetaId;u(m,this)[t]=this.startPolling({bridgeTxMetaId:t})}))})),l(this,"startPollingForBridgeTxStatus",(e=>{const{bridgeTxMeta:t,statusRequest:n,quoteResponse:r,startTime:o,slippagePercentage:a,initialDestAssetBalance:i,targetContractAddress:l}=e,{bridgeStatusState:c}=this.state,{address:d}=h(C,this,k).call(this),p={txMetaId:t.id,quote:r.quote,startTime:o,estimatedProcessingTimeInSeconds:r.estimatedProcessingTimeInSeconds,slippagePercentage:a,pricingData:{amountSent:r.sentAmount.amount},initialDestAssetBalance:i,targetContractAddress:l,account:d,status:{status:s.StatusTypes.PENDING,srcChain:{chainId:n.srcChainId,txHash:n.srcTxHash}}};this.update((e=>{e.bridgeStatusState={...c,txHistory:{...c.txHistory,[t.id]:p}}})),u(m,this)[t.id]=this.startPolling({bridgeTxMetaId:t.id})})),l(this,"_executePoll",(async e=>{await u(f,this).call(this,e)})),c(this,f,(async({bridgeTxMetaId:e})=>{const{bridgeStatusState:t}=this.state;try{const n=t.txHistory[e],r=u(y,this).call(this,e);if(!r)return;u(v,this).call(this,e,r);const o=(0,i.getStatusRequestWithSrcTxHash)(n.quote,r),a=await(0,i.fetchBridgeTxStatus)(o);this.update((n=>{const r=n.bridgeStatusState.txHistory[e];n.bridgeStatusState={...t,txHistory:{...t.txHistory,[e]:{...r,status:a}}}}));const l=u(m,this)[e];a.status===s.StatusTypes.COMPLETE&&l&&this.stopPollingByPollingToken(l)}catch(e){console.log("Failed to fetch bridge tx status",e)}})),c(this,y,(e=>{const{bridgeStatusState:t}=this.state,n=t.txHistory[e].status.srcChain.txHash;if(n)return n;const r=this.messagingSystem.call("TransactionController:getState").transactions.find((t=>t.id===e));return null==r?void 0:r.hash})),c(this,v,((e,t)=>{const{bridgeStatusState:n}=this.state;n.txHistory[e].status.srcChain.txHash||this.update((r=>{r.bridgeStatusState={...n,txHistory:{...n.txHistory,[e]:{...n.txHistory[e],status:{...n.txHistory[e].status,srcChain:{...n.txHistory[e].status.srcChain,txHash:t}}}}}}))})),c(this,w,((e,t)=>{const n=Object.keys(this.state.bridgeStatusState.txHistory).filter((n=>{const r=this.state.bridgeStatusState.txHistory[n],s=(0,o.decimalToPrefixedHex)(r.quote.srcChainId);return r.account===e&&s===t}));n.forEach((e=>{u(m,this)[e]&&this.stopPollingByPollingToken(u(m,this)[e])})),this.update((e=>{e.bridgeStatusState.txHistory=n.reduce(((e,t)=>(delete e[t],e)),e.bridgeStatusState.txHistory)}))})),this.messagingSystem.registerActionHandler(`${a.BRIDGE_STATUS_CONTROLLER_NAME}:startPollingForBridgeTxStatus`,this.startPollingForBridgeTxStatus.bind(this)),this.messagingSystem.registerActionHandler(`${a.BRIDGE_STATUS_CONTROLLER_NAME}:wipeBridgeStatus`,this.wipeBridgeStatus.bind(this)),this.setIntervalLength(a.REFRESH_INTERVAL_MS),u(g,this).call(this)}}function k(){return this.messagingSystem.call("AccountsController:getSelectedAccount")}n.default=b}}},{package:"$root$",file:"app/scripts/controllers/bridge-status/bridge-status-controller.ts"}],[140,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:5,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,n={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete n.vault,delete n.walletNicknames,delete n.config.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[141,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:6,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,n={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete n.KeyringController.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[142,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:7,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[143,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:8,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[144,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:9,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,r.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[145,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:10,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,r.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[146,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:11,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[147,{lodash:4866},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:12,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[1471,{"@ethersproject/providers":567,"@metamask/base-controller":1397,"@metamask/controller-utils":1423,"@metamask/utils":3224,"punycode/punycode.js":5071},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,o,a,i,l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},c=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};Object.defineProperty(n,"__esModule",{value:!0}),n.EnsController=n.DEFAULT_ENS_NETWORK_MAP=void 0;const d=e("@ethersproject/providers"),u=e("@metamask/base-controller"),h=e("@metamask/controller-utils"),p=e("@metamask/utils"),m=e("punycode/punycode.js"),g=(0,p.createProjectLogger)("ens-controller");n.DEFAULT_ENS_NETWORK_MAP={1:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",3:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",4:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",5:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",17e3:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",11155111:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"};const C={ensEntries:{persist:!0,anonymous:!1},ensResolutionsByAddress:{persist:!0,anonymous:!1}},f={ensEntries:{},ensResolutionsByAddress:{}};class y extends u.BaseController{constructor({registriesByChainId:e=n.DEFAULT_ENS_NETWORK_MAP,messenger:t,state:i={},onNetworkDidChange:c}){super({name:"EnsController",metadata:C,messenger:t,state:{...f,ensEntries:Object.fromEntries(Object.entries(e).map((([e,t])=>[(0,h.toHex)(e),{".":{address:t,chainId:(0,h.toHex)(e),ensName:"."}}]))),...i}}),r.add(this),s.set(this,null),l(this,r,"m",o).call(this,e),c&&c((({selectedNetworkClientId:t})=>{this.resetState(),l(this,r,"m",a).call(this,t,e)}))}resetState(){this.update((e=>{e.ensResolutionsByAddress={}}))}clear(){this.update((e=>{e.ensEntries={}}))}delete(e,t){const n=(0,h.normalizeEnsName)(t);return!!((0,h.isSafeDynamicKey)(e)&&n&&this.state.ensEntries[e]&&this.state.ensEntries[e][n])&&(this.update((t=>{delete t.ensEntries[e][n],0===Object.keys(t.ensEntries[e]).length&&delete t.ensEntries[e]})),!0)}get(e,t){const n=(0,h.normalizeEnsName)(t);return n&&this.state.ensEntries[e]&&this.state.ensEntries[e][n]||null}set(e,t,n){if(!Number.isInteger(Number.parseInt(e,10))||!t||"string"!=typeof t||n&&!(0,h.isValidHexAddress)(n))throw new Error(`Invalid ENS entry: { chainId:${e}, ensName:${t}, address:${n}}`);const r=(0,h.normalizeEnsName)(t);if(!r)throw new Error(`Invalid ENS name: ${t}`);const s=n?(0,h.toChecksumHexAddress)(n):null,o=this.state.ensEntries[e];return(!o?.[r]||o[r].address!==s)&&(this.update((t=>{t.ensEntries={...this.state.ensEntries,[e]:{...this.state.ensEntries[e],[r]:{address:s,chainId:e,ensName:r}}}})),!0)}async reverseResolveAddress(e){if(!l(this,s,"f"))return undefined;const t=(0,h.toChecksumHexAddress)(e);if(this.state.ensResolutionsByAddress[t])return this.state.ensResolutionsByAddress[t];let n,r;try{n=await l(this,s,"f").lookupAddress(t)}catch(e){return g(e),undefined}if(!n)return undefined;try{r=await l(this,s,"f").resolveName(n)}catch(e){return g(e),undefined}return r?"0x0000000000000000000000000000000000000000"===r||"0x"===r||(0,h.toChecksumHexAddress)(r)!==t?undefined:(this.update((e=>{e.ensResolutionsByAddress[t]=(0,m.toASCII)(n)})),n):undefined}}n.EnsController=y,s=new WeakMap,r=new WeakSet,o=function(e){const{selectedNetworkClientId:t}=this.messagingSystem.call("NetworkController:getState");l(this,r,"m",a).call(this,t,e)},a=function(e,t){const{configuration:{chainId:n},provider:o}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);t&&t[parseInt(n,16)]&&l(this,r,"m",i).call(this,n)?c(this,s,new d.Web3Provider(o,{chainId:(0,h.convertHexToDecimal)(n),name:h.CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP[n],ensAddress:t[parseInt(n,16)]}),"f"):c(this,s,null,"f")},i=function(e){return Boolean(this.state.ensEntries[e])},n.default=y}}},{package:"@metamask/ens-controller",file:"node_modules/@metamask/ens-controller/dist/EnsController.cjs"}],[1472,{"./EnsController.cjs":1471},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./EnsController.cjs"),n)}}},{package:"@metamask/ens-controller",file:"node_modules/@metamask/ens-controller/dist/index.cjs"}]],[],{});